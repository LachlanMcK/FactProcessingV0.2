{
  "name": "forms-processing",
  "version": "0.0.1",
  "description": "An experiment in processing Facts (non-informational Forms) received in the Forms Data Structure format in the cloud using the JSRE for validation.",
  "main": "lambda.js",
  "config": {
    "s3BucketName": "tig0002-s3-bucket",
    "region": "ap-southeast-2",
    "cloudFormationStackName": "AwsServerlessExpressStack",
    "functionName": "serverlessFacts",
    "accountId": "833897814548"
  },
  "scripts": {
    "start": "node app.local.js",
    "config": "node ./FactProcessing/scripts/configure.js",
    "deconfig": "node ./FactProcessing/scripts/deconfigure.js",
    "local": "node FactProcessing/scripts/local",
    "invoke-lambda": "aws lambda invoke --function-name $npm_package_config_functionName --region $npm_package_config_region --payload file://api-gateway-event.json lambda-invoke-response.json && cat lambda-invoke-response.json",
    "create-bucket": "aws s3 mb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "delete-bucket": "aws s3 rb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "package": "aws cloudformation package --template ./cloudformation.yaml --s3-bucket $npm_package_config_s3BucketName --output-template packaged-sam.yaml --region $npm_package_config_region",
    "deploy": "aws cloudformation deploy --template-file packaged-sam.yaml --stack-name $npm_package_config_cloudFormationStackName --capabilities CAPABILITY_IAM --region $npm_package_config_region",
    "package-deploy": "npm run package && npm run deploy",
    "delete-stack": "aws cloudformation delete-stack --stack-name $npm_package_config_cloudFormationStackName --region $npm_package_config_region",
    "setup": "npm install && (aws s3api get-bucket-location --bucket $npm_package_config_s3BucketName --region $npm_package_config_region || npm run create-bucket) && npm run package-deploy",
    "win-config": "npm run config",
    "win-deconfig": "npm run deconfig",
    "win-local": "npm run local",
    "win-invoke-lambda": "aws lambda invoke --function-name %npm_package_config_functionName% --region %npm_package_config_region% --payload file://api-gateway-event.json lambda-invoke-response.json && cat lambda-invoke-response.json",
    "win-create-bucket": "aws s3 mb s3://%npm_package_config_s3BucketName% --region %npm_package_config_region%",
    "win-delete-bucket": "aws s3 rb s3://%npm_package_config_s3BucketName% --region %npm_package_config_region%",
    "win-package": "aws cloudformation package --template ./cloudformation.yaml --s3-bucket %npm_package_config_s3BucketName% --output-template packaged-sam.yaml --region %npm_package_config_region%",
    "win-deploy": "aws cloudformation deploy --template-file packaged-sam.yaml --stack-name %npm_package_config_cloudFormationStackName% --capabilities CAPABILITY_IAM --region %npm_package_config_region%",
    "win-package-deploy": "npm run win-package && npm run win-deploy",
    "win-delete-stack": "aws cloudformation delete-stack --stack-name %npm_package_config_cloudFormationStackName% --region %npm_package_config_region%",
    "win-setup": "npm install && (aws s3api get-bucket-location --bucket %npm_package_config_s3BucketName% --region %npm_package_config_region% || npm run win-create-bucket) && npm run win-package-deploy",
    "start-original-command-before-SAM": "npm run serve",
    "build": "npm run build-ts && npm run tslint",
    "serve": "node ./FactProcessing/server.js",
    "watch-1": "concurrently -k -p \"[{name}]\" -n \"TypeScript,Node\" -c \"cyan.bold,green.bold\" \"npm run watch-ts\" \"npm run watch-node\"",
    "watch-2": "start npm run watch-ts && start npm run watch-node",
    "watch-node": "nodemon ./FactProcessing/server.js -i ./FactProcessing/tests",
    "watch": "concurrently -k -p \"[{name}]\" -n \"Sass,TypeScript,Node\" -c \"yellow.bold,cyan.bold,green.bold\" \"npm run watch-sass\" \"npm run watch-ts\" \"npm run watch-node\"",
    "test": "mocha --exit ./test/*.test.js",
    "test1": "jest --forceExit --coverage --verbose --detectOpenHandles",
    "test2": "jest ",
    "test3": "jest --detectOpenHandles",
    "test4": "jest --forceExit --detectOpenHandles",
    "test-to-file": "jest --forceExit --verbose --detectOpenHandles --runInBand > ./FactProcessing/testOutput.txt 2>&1",
    "testOneCase": "npm run test -- -u -t='Get 1' //this is an example to be copied to command line, doesn't work as npm script",
    "watch-test": "npm run test -- --watchAll",
    "build-ts": "tsc",
    "watch-ts": "tsc -w",
    "tslint": "tslint -c tslint.json -p tsconfig.json",
    "debug": "npm run build && npm run watch-debug",
    "serve-debug": "nodemon --inspect lib/src/app.js",
    "watch-debug": "concurrently -k -p \"[{name}]\" -n \"Sass,TypeScript,Node\" -c \"yellow.bold,cyan.bold,green.bold\" \"npm run watch-sass\" \"npm run watch-ts\" \"npm run serve-debug\""
  },
  "author": "ual3p",
  "license": "MIT",
  "dependencies": {
    "@types/amqp": "^0.2.4",
    "@types/amqplib": "^0.5.13",
    "@types/express": "^4.17.6",
    "@types/mongoose": "^5.7.15",
    "@types/request-promise-native": "^1.0.17",
    "@types/xml2js": "^0.4.5",
    "amdefine": "^1.0.1",
    "amqplib": "^0.5.5",
    "aws-serverless-express": "^3.3.6",
    "body-parser": "^1.19.0",
    "chai": "^4.2.0",
    "dotenv": "^4.0.0",
    "express": "^4.17.1",
    "moment-timezone": "^0.5.23",
    "mongodb": "^3.5.7",
    "mongoose": "^5.7.5",
    "morgan": "^1.9.1",
    "request": "^2.88.2",
    "request-promise-native": "^1.0.8",
    "semver": "^5.6.0",
    "stack-trace": "0.0.10",
    "xml2js": "^0.4.23"
  },
  "devDependencies": {
    "mocha": "^7.2.0",
    "nyc": "^15.1.0",
    "supertest": "^3.4.2"
  },
  "directories": {
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/LachlanMcK/FactProcessingV0.1.git"
  },
  "bugs": {
    "url": "https://github.com/LachlanMcK/FactProcessingV0.1/issues"
  },
  "homepage": "https://github.com/LachlanMcK/FactProcessingV0.1#readme"
}
