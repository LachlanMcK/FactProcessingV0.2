"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const myLog = __importStar(require("../../myLog"));
myLog.debug("Inside checkAuthentication, runtimeEnvironment: " + (process.env.runtimeEnvironment || "") + " mockAuthzModule: " + (process.env.mockAuthnModule || ""));
exports.checkAuthentication = function (req, res, next) {
    req.params.securityPrincipleId = JSON.parse((req.headers['atoIdpAccessToken'] || "{}")).clientInternalId;
    next();
};
//Naturally don't allow mocks in 'PROD' enviornment
//Restrict mocks to coming from predetermined mock folder
//Mock will replace checkAuthentication, assume all it will do is populate atoIdpAccessToken header property
if ((process.env.runtimeEnvironment || 'unknown') !== 'PROD' && process.env.mockAuthnModule)
    exports.checkAuthentication = require('../mocks/' + process.env.mockAuthnModule).base(exports.checkAuthentication);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tBdXRoZW50aWNhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNoZWNrQXV0aGVudGljYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsbURBQXFDO0FBR3JDLEtBQUssQ0FBQyxLQUFLLENBQUMsa0RBQWtELEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixJQUFJLEVBQUUsQ0FBQyxHQUFHLG9CQUFvQixHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLElBQUksRUFBRSxDQUFDLENBQUUsQ0FBQztBQW9CNUosUUFBQSxtQkFBbUIsR0FBRyxVQUFVLEdBQW9CLEVBQUUsR0FBcUIsRUFBRSxJQUEwQjtJQUU5RyxHQUFHLENBQUMsTUFBTSxDQUFDLG1CQUFtQixHQUFhLElBQUksQ0FBQyxLQUFLLENBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksSUFBSSxDQUFZLENBQXVCLENBQUMsZ0JBQWdCLENBQUM7SUFFckosSUFBSSxFQUFFLENBQUM7QUFDWCxDQUFDLENBQUM7QUFFRixtREFBbUQ7QUFDbkQseURBQXlEO0FBQ3pELDRHQUE0RztBQUM1RyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxTQUFTLENBQUMsS0FBSyxNQUFNLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlO0lBQ3ZGLDJCQUFtQixHQUFHLE9BQU8sQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUF5QixDQUFDLENBQUMsSUFBSSxDQUFDLDJCQUFtQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBteUxvZyBmcm9tICcuLi8uLi9teUxvZyc7XHJcbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XHJcbiBcclxubXlMb2cuZGVidWcoXCJJbnNpZGUgY2hlY2tBdXRoZW50aWNhdGlvbiwgcnVudGltZUVudmlyb25tZW50OiBcIiArIChwcm9jZXNzLmVudi5ydW50aW1lRW52aXJvbm1lbnQgfHwgXCJcIikgKyBcIiBtb2NrQXV0aHpNb2R1bGU6IFwiICsgKHByb2Nlc3MuZW52Lm1vY2tBdXRobk1vZHVsZSB8fCBcIlwiKSApO1xyXG5cclxuLy9BcmNoaXRlY3R1cmFsIERlY2lzaW9uOlxyXG4vLyAgSXQgaXMgZXhwZWN0ZWQgdGhpcyBzb2x1dGlvbiB3aWxsIHNpdCBiZWhpbmQgYW4gQVBJIGdhdGV3YXkgKG1heWJlIHRoZSBBV1MgQVBJIEdhdGV3YXkpLiAgVGhlIEFQSSBjb25zdW1lciB3aWxsXHJcbi8vICBnZXQgYSBcInRyYW5zcGFyZW50XCIgT0F1dGggdG9rZW4gZnJvbSB0aGUgQVRPIElEUCBwcmlvciB0byBpbnZva2luZyB0aGUgQVBJLiAgVGhlIGdhdGV3YXkgd2lsbCB0YWxrIHRvIElTRiB0byB2YWxpZGF0ZVxyXG4vLyAgdGhlIHRva2VuLiAgU28sIGF1dGhlbnRpY2F0aW9uIHdpbGwgdGFrZSBwbGFjZSB1cHN0cmVhbS5cclxuLy8gIFxyXG4vLyAgSXQgaXMgZXhwZWN0ZWQgYWxsIHRoaXMgbW9kdWxlIHdpbGwgbmVlZCB0byBkbyBpcyBhY2Nlc3MgdGhlIHRyYW5zcGFyZW50IGFjY2Nlc3MgdG9rZW4gdG8gZXh0cmFjdCB0aGUgXHJcbi8vICBzZWN1cml0eSBwcmluY2lwbGVzIGlkZW50aXR5LlxyXG5cclxuLy8gIFRvRG86IEFncmVlIHdpdGggRENJUyBmdWxsIGRlZmludGlvbiBvZiBhdG9JRFBBY2Nlc3NUb2tlbiBhbmQgcmVmZXJlbmNlIGl0IGhlcmUuXHJcbi8vICAgICAgICBJbiB0aGUgbWVhbnRpbWUsIHRoaXMgZGVmaW50aW9uIHdpbGwgZG8uXHJcbmludGVyZmFjZSBhdG9JRFBBY2Nlc3NUb2tlbiB7XHJcbiAgICBjbGllbnRFeHRlcm5hbElkZW50aWZpZXI/OiB7XHJcbiAgICAgICAgVHlwZTogc3RyaW5nO1xyXG4gICAgICAgIFZhbHVlOiBzdHJpbmc7XHJcbiAgICB9XHJcbiAgICBjbGllbnRJbnRlcm5hbElkPzogc3RyaW5nO1xyXG59ICBcclxuXHJcbmV4cG9ydCBsZXQgY2hlY2tBdXRoZW50aWNhdGlvbiA9IGZ1bmN0aW9uIChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlLCBuZXh0OiBleHByZXNzLk5leHRGdW5jdGlvbikge1xyXG5cclxuICAgIHJlcS5wYXJhbXMuc2VjdXJpdHlQcmluY2lwbGVJZCA9IDxzdHJpbmc+IChKU09OLnBhcnNlKCAocmVxLmhlYWRlcnNbJ2F0b0lkcEFjY2Vzc1Rva2VuJ10gfHwgXCJ7fVwiICkgYXMgc3RyaW5nKSBhcyBhdG9JRFBBY2Nlc3NUb2tlbikuY2xpZW50SW50ZXJuYWxJZDtcclxuICAgIFxyXG4gICAgbmV4dCgpO1xyXG59O1xyXG5cclxuLy9OYXR1cmFsbHkgZG9uJ3QgYWxsb3cgbW9ja3MgaW4gJ1BST0QnIGVudmlvcm5tZW50XHJcbi8vUmVzdHJpY3QgbW9ja3MgdG8gY29taW5nIGZyb20gcHJlZGV0ZXJtaW5lZCBtb2NrIGZvbGRlclxyXG4vL01vY2sgd2lsbCByZXBsYWNlIGNoZWNrQXV0aGVudGljYXRpb24sIGFzc3VtZSBhbGwgaXQgd2lsbCBkbyBpcyBwb3B1bGF0ZSBhdG9JZHBBY2Nlc3NUb2tlbiBoZWFkZXIgcHJvcGVydHlcclxuaWYgKChwcm9jZXNzLmVudi5ydW50aW1lRW52aXJvbm1lbnQgfHwgJ3Vua25vd24nKSAhPT0gJ1BST0QnICYmIHByb2Nlc3MuZW52Lm1vY2tBdXRobk1vZHVsZSlcclxuICAgIGNoZWNrQXV0aGVudGljYXRpb24gPSByZXF1aXJlKCcuLi9tb2Nrcy8nICsgcHJvY2Vzcy5lbnYubW9ja0F1dGhuTW9kdWxlIGFzIHN0cmluZykuYmFzZShjaGVja0F1dGhlbnRpY2F0aW9uKTsgXHJcbiJdfQ==