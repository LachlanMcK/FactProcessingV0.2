function define() { module.exports = require("../../dependenciesMap").apply(this, arguments); }
// -----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//   Runtime Version: v4.0.30319
//   Service Registry Version: 3.23.0.0
//   Part of release: ${PackageName}
//   Generated at: ${GenerationDate}
//
//   Changes to this file may cause incorrect behaviour and
//   will be lost if the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------------

define([
  "services/jsre/fdfType", "services/jsre/limits", "services/jsre/lineItem", "services/jsre/rulesEngine", "services/refData/refDataService",
  "./oTH_PAYROLL_EVENT_CHILDForm", "./oTH_PAYROLL_EVENT_CHILDMapping"
], function(
  FdfType, Limits, LineItem, RulesEngine, refDataService, f, fieldMapping) {
  "use strict";

  var fields = fieldMapping.oTH_PAYROLL_EVENT_CHILD.fields;
  var sections = fieldMapping.oTH_PAYROLL_EVENT_CHILD.sections;

  var executeRules = function(vm, li, processingMode) {
    li = li || {};

    mapVMToLI(vm, li);

    var re = new RulesEngine(f, li, processingMode || "validate");

    mapVMToHeader(vm, re.headerDetails);

    re.run();

    mapErrorsToVM(re.errors, vm);
    mapLIToVM(li, vm);

    return re;
  };

  executeRules.mapVMToLI = mapVMToLI;
  executeRules.mapLIToVM = mapLIToVM;

  return executeRules;

  function addLIIfNotEmpty(sli, s, id, vm) {
    var vmValue = vm();
    if (vmValue === undefined || vmValue === null || vmValue === "") return;
    sli[id] = new LineItem(s[id], vmValue);
  }

  function setIfChanged(li, vm) {
    var liValue, vmValue = vm();
    if (li !== undefined) {
      liValue = li.toString();
    //  liValue = ((li.type === FdfType.ALPHA) ? li : +li.valueOf()).toString();
    //} else {
    //  var t = typeof vmValue;
    //  liValue =
    //    (t === "numeric") ? 0 :
    //    (t === "boolean") ? false :
    //    "";
    }
    if (vmValue !== liValue) {
      vm(liValue);
    }
  }

  function mapVMToHeader(vm, hd) {
    hd.clientInternalId(vm.clientInternalId);
    hd.accountId(vm.clientAccountId);
    hd.accountSequenceNumber(vm.clientAccountSequenceNumber);
    hd.roleType(vm.clientRoleTypeCode);
    hd.periodBeginDate(vm.formPeriodBeginDate);
    hd.periodEndDate(vm.formPeriodEndDate);

    hd.transactionId(vm.coreProcessingTransactionId);
    hd.transactionType(vm.coreProcessingTransactionTypeCode);
    hd.linkedTransactionId(vm.sourceCoreProcessingTransactionId);
    //hd.suspendedClientInternalId();

    hd.formYear(vm.formYear);
    hd.formMonth(vm.formMonthNumber);

    hd.receivedDate(vm.formReceivedDate);
    hd.lodgmentCompletedDate(vm.formCompletedDate);
    hd.batchId(vm.formBatchId);
    //hd.externalBatchId();
    //hd.externalAgency();
    hd.channelUsed(vm.channelTypeCode);

    hd.updateUserId(vm.coreProcessingTransactionLastUpdatedById);
    hd.updateSource(vm.coreProcessingTransactionLastUpdatedSourceCode);
    hd.updateReason(vm.coreProcessingTransactionLastUpdatedReasonCode);
  }

  function mapErrorsToVM(errors, vm) {
    var i, l, fieldIdFilter, errorCodeFilter, error, pm, mapping, messages;

    // map any errors returned to process messages

    fieldIdFilter = function (row) { return row[1] === error.fieldId; };
    errorCodeFilter = function (row) { return row[1] === error.errorCode; };

    for (i = 0, l = errors.length; i < l; i++) {
      error = errors[i];

      pm = vm.newSG("processMessage");

      pm.sectionId = error.fieldSectionId;
      pm.fieldId = error.fieldId;

      pm.FdfFieldSequence(error.fieldOccurrence);
      pm.Severity(1);
      pm.Id(error.errorCode);

      if (error.ruleId) {
        // rules, may have field (and section id)
        // only use field id, get section id from mapping
        pm.RuleId(error.ruleId);
        if (error.fieldId) {
          mapping = fields.find(fieldIdFilter);
          pm.MessageFieldName(mapping[3]);
          pm.FdfSectionId(sections[mapping[0]]);
        }

        messages = refDataService.get("TC2FDFERR").rows.find(errorCodeFilter);
        pm.Message(messages && (messages[3].trim() || messages[2]) || "Unknown error");
      } else {
        // genVal, always have correct section and field id
        mapping = fields.find(fieldIdFilter);
        pm.MessageFieldName(mapping[3]);
        pm.FdfSectionId(sections[error.fieldSectionId]);

        pm.Message(error.text.charAt(0) + error.text.substr(1).toLowerCase());
      }
    }
  }

  function mapVMToLI(vm, li) {
    var s, sli, i, l, sg, item;
    var li1, li2, li3, li4, li5;

    // OTH-PAYER_DTLS
    s = f[10931];
    sli = li[10931];
    if (!sli) sli = li[10931] = {};
    addLIIfNotEmpty(sli, s, 16556, vm.oTH_PAYER_DTLS_ClientExternalID);
    addLIIfNotEmpty(sli, s, 14930, vm.oTH_PAYER_DTLS_ClientExternalIdentifierTypeCode);
    addLIIfNotEmpty(sli, s, 16557, vm.oTH_PAYER_DTLS_UnstructuredFullName);
    addLIIfNotEmpty(sli, s, 23930, vm.oTH_PAYER_DTLS_DerivedClientIdentifierAustralianBusinessNumber);
    addLIIfNotEmpty(sli, s, 23951, vm.oTH_PAYER_DTLS_DerivedUnstructuredFullName);
    addLIIfNotEmpty(sli, s, 15431, vm.oTH_PAYER_DTLS_BusinessMangamentSoftwareIdentifier);
    addLIIfNotEmpty(sli, s, 18449, vm.oTH_PAYER_DTLS_EmployerBranchCode);
    addLIIfNotEmpty(sli, s, 20472, vm.oTH_PAYER_DTLS_DerivedClientBranchNumber);

    // OTH-PAYEE_DTLS
    s = f[10932];
    sli = li[10932];
    if (!sli) sli = li[10932] = {};
    addLIIfNotEmpty(sli, s, 16558, vm.oTH_PAYEE_DTLS_CurrentPayerPayeeRelationshipPayeePayrollIdentifier);
    addLIIfNotEmpty(sli, s, 25443, vm.oTH_PAYEE_DTLS_PayerPayeeRelationshipCommencementDate);
    addLIIfNotEmpty(sli, s, 25242, vm.oTH_PAYEE_DTLS_PayerPayeeRelationshipCessationDate);
    addLIIfNotEmpty(sli, s, 16560, vm.oTH_PAYEE_DTLS_ClientIdentifierTaxFileNumber);
    addLIIfNotEmpty(sli, s, 25444, vm.oTH_PAYEE_DTLS_ContractorClientIdentifierAustralianBusinessNumber);
    addLIIfNotEmpty(sli, s, 16561, vm.oTH_PAYEE_DTLS_StructuredFamilyName);
    addLIIfNotEmpty(sli, s, 16562, vm.oTH_PAYEE_DTLS_StructuredGivenName);
    addLIIfNotEmpty(sli, s, 16565, vm.oTH_PAYEE_DTLS_StructuredOtherGivenName);
    addLIIfNotEmpty(sli, s, 25445, vm.oTH_PAYEE_DTLS_IndividualBirthDate);
    addLIIfNotEmpty(sli, s, 16567, vm.oTH_PAYEE_DTLS_UnstructuredGeographicAddressLine1);
    addLIIfNotEmpty(sli, s, 16568, vm.oTH_PAYEE_DTLS_UnstructuredGeographicAddressLine2);
    addLIIfNotEmpty(sli, s, 16571, vm.oTH_PAYEE_DTLS_StructuredGeographicAddressLocalityName);
    addLIIfNotEmpty(sli, s, 16572, vm.oTH_PAYEE_DTLS_StructuredGeographicAddressStateCode);
    addLIIfNotEmpty(sli, s, 16573, vm.oTH_PAYEE_DTLS_StructuredGeographicAddressPostcode);
    addLIIfNotEmpty(sli, s, 16574, vm.oTH_PAYEE_DTLS_CountryCode);
    addLIIfNotEmpty(sli, s, 25446, vm.oTH_PAYEE_DTLS_PayeeInternetEmailAddress);
    addLIIfNotEmpty(sli, s, 25447, vm.oTH_PAYEE_DTLS_PayeeTelephoneNumber);

    // OTH-PAYROLL_EVNT
    s = f[10933];
    sli = li[10933];
    if (!sli) sli = li[10933] = {};
    addLIIfNotEmpty(sli, s, 16580, vm.oTH_PAYROLL_EVNT_PayrollEventPeriodStartDate);
    addLIIfNotEmpty(sli, s, 16582, vm.oTH_PAYROLL_EVNT_PayrollEventPeriodEndDate);
    addLIIfNotEmpty(sli, s, 18450, vm.oTH_PAYROLL_EVNT_FinancialYear);
    addLIIfNotEmpty(sli, s, 16585, vm.oTH_PAYROLL_EVNT_LodgmentDate);
    addLIIfNotEmpty(sli, s, 16710, vm.oTH_PAYROLL_EVNT_PaymentDate);
    addLIIfNotEmpty(sli, s, 25451, vm.oTH_PAYROLL_EVNT_PayrollMessageTimestampSourceDatetime);
    addLIIfNotEmpty(sli, s, 25452, vm.oTH_PAYROLL_EVNT_PayrollEventFinalIndicator);

    // OTH-WAGE_AND_TAX_ITEM
    s = f[10936];
    sli = li[10936];
    if (!sli) sli = li[10936] = {};
    addLIIfNotEmpty(sli, s, 15470, vm.oTH_WAGE_AND_TAX_ITEM_PayeeForeignIncomeExemptAmount);
    addLIIfNotEmpty(sli, s, 15488, vm.oTH_WAGE_AND_TAX_ITEM_PayeeIncomeCommunityDevelopmentEmploymentProjectAmount);
    addLIIfNotEmpty(sli, s, 16787, vm.oTH_WAGE_AND_TAX_ITEM_PayeeAnnualLongServiceLeaveUnusedLumpSumACode);
    addLIIfNotEmpty(sli, s, 15499, vm.oTH_WAGE_AND_TAX_ITEM_PayeeAnnualLongServiceLeaveUnusedLumpSumAAmount);
    addLIIfNotEmpty(sli, s, 15501, vm.oTH_WAGE_AND_TAX_ITEM_PayeeAnnualLongServiceLeaveUnusedLumpSumBAmount);
    addLIIfNotEmpty(sli, s, 15508, vm.oTH_WAGE_AND_TAX_ITEM_PayeeAnnualLongServiceLeaveUnusedLumpSumDAmount);
    addLIIfNotEmpty(sli, s, 15510, vm.oTH_WAGE_AND_TAX_ITEM_PayeeAnnualLongServiceLeaveUnusedLumpSumEAmount);
    addLIIfNotEmpty(sli, s, 15454, vm.oTH_WAGE_AND_TAX_ITEM_PayeeYearToDateIncomeGrossAmount);
    addLIIfNotEmpty(sli, s, 25455, vm.oTH_WAGE_AND_TAX_ITEM_PayeeForeignIncomeEmploymentGrossAmount);
    addLIIfNotEmpty(sli, s, 25456, vm.oTH_WAGE_AND_TAX_ITEM_PayeeForeignIncomeEmploymentJointPetroleumDevelopmentAreaGrossAmount);
    addLIIfNotEmpty(sli, s, 15456, vm.oTH_WAGE_AND_TAX_ITEM_PayeeIncomeLabourHireArrangementGrossAmount);
    addLIIfNotEmpty(sli, s, 15518, vm.oTH_WAGE_AND_TAX_ITEM_PayeeIncomeVoluntaryAgreementGrossAmount);
    addLIIfNotEmpty(sli, s, 25457, vm.oTH_WAGE_AND_TAX_ITEM_PayeeIncomeOtherAmount);
    addLIIfNotEmpty(sli, s, 27454, vm.oTH_WAGE_AND_TAX_ITEM_PayeeIncomeWorkingHolidayMakerYearToDateGrossAmount);
    addLIIfNotEmpty(sli, s, 25458, vm.oTH_WAGE_AND_TAX_ITEM_PayeeFringeBenefitsReportableTaxableAmount);
    addLIIfNotEmpty(sli, s, 25459, vm.oTH_WAGE_AND_TAX_ITEM_PayeeFringeBenefitsReportableExemptAmount);
    addLIIfNotEmpty(sli, s, 16820, vm.oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingYearToDateWithheldAmount);
    addLIIfNotEmpty(sli, s, 25460, vm.oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingForeignEmploymentIncomeTotalAmount);
    addLIIfNotEmpty(sli, s, 25461, vm.oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingForeignEmploymentIncomeJointPetroleumDevelopmentAreaTotalAmount);
    addLIIfNotEmpty(sli, s, 25462, vm.oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingLabourHireTotalAmount);
    addLIIfNotEmpty(sli, s, 25463, vm.oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingVoluntaryAgreementTotalAmount);
    addLIIfNotEmpty(sli, s, 25464, vm.oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingOtherSpecifiedTotalAmount);
    addLIIfNotEmpty(sli, s, 27455, vm.oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingWorkingHolidayMakerYearToDateTotalAmount);
    addLIIfNotEmpty(sli, s, 15523, vm.oTH_WAGE_AND_TAX_ITEM_YearToDateForeignIncomeEmploymentTaxCreditWithheldAmount);
    addLIIfNotEmpty(sli, s, 27456, vm.oTH_WAGE_AND_TAX_ITEM_JointPetroleumDevelopmentAreaForeignIncomeEmploymentTaxPaidYearToDateAmount);
    addLIIfNotEmpty(sli, s, 26716, vm.oTH_WAGE_AND_TAX_ITEM_PaymentSummaryTotalGrossPaymentAmount);
    addLIIfNotEmpty(sli, s, 26717, vm.oTH_WAGE_AND_TAX_ITEM_TaxWithheldTotalAmount);
    if (sg = vm.oTH_WAGE_AND_TAX_ITEM_SectionGroup5s(), l = sg.length) {
      li1 = sli[15453] = new LineItem(s[15453]);
      li2 = sli[25453] = new LineItem(s[25453]);
      li3 = sli[25454] = new LineItem(s[25454]);
      li4 = sli[15489] = new LineItem(s[15489]);
      li5 = sli[15496] = new LineItem(s[15496]);
      for (i = 0; i < l; i++) {
        item = sg[i];
        li1.i(i).setValue(item.oTH_WAGE_AND_TAX_ITEM_EmploymentTerminationPaymentTypeCode());
        li2.i(i).setValue(item.oTH_WAGE_AND_TAX_ITEM_EmploymentTerminationPaymentPaymentDate());
        li3.i(i).setValue(item.oTH_WAGE_AND_TAX_ITEM_EmploymentTerminationPaymentTaxWithheldTotalAmount());
        li4.i(i).setValue(item.oTH_WAGE_AND_TAX_ITEM_EmploymentTerminationPaymentTaxFreeAmount());
        li5.i(i).setValue(item.oTH_WAGE_AND_TAX_ITEM_EmploymentTerminationPaymentTaxableComponentAmount());
      }
    }

    // OTH-DEDUCTION_ITEM
    s = f[10939];
    sli = li[10939];
    if (!sli) sli = li[10939] = {};
    if (sg = vm.oTH_DEDUCTION_ITEM_SectionGroup3s(), l = sg.length) {
      li1 = sli[16825] = new LineItem(s[16825]);
      li2 = sli[16833] = new LineItem(s[16833]);
      for (i = 0; i < l; i++) {
        item = sg[i];
        li1.i(i).setValue(item.oTH_DEDUCTION_ITEM_IndividualDeductionTypeCode());
        li2.i(i).setValue(item.oTH_DEDUCTION_ITEM_IndividualDeductionYearToDateAmount());
      }
    }

    // OTH-ALLOWANCE_ITEM
    s = f[10941];
    sli = li[10941];
    if (!sli) sli = li[10941] = {};
    addLIIfNotEmpty(sli, s, 25465, vm.oTH_ALLOWANCE_ITEM_AllowanceIncomeTotalAmount);
    if (sg = vm.oTH_ALLOWANCE_ITEM_SectionGroup4s(), l = sg.length) {
      li1 = sli[16835] = new LineItem(s[16835]);
      li2 = sli[15524] = new LineItem(s[15524]);
      li3 = sli[16841] = new LineItem(s[16841]);
      for (i = 0; i < l; i++) {
        item = sg[i];
        li1.i(i).setValue(item.oTH_ALLOWANCE_ITEM_AllowanceIncomeTypeCode());
        li2.i(i).setValue(item.oTH_ALLOWANCE_ITEM_AllowanceIncomeTypeOtherDescriptionText());
        li3.i(i).setValue(item.oTH_ALLOWANCE_ITEM_AllowanceIncomeYearToDateAmount());
      }
    }

    // OTH-SUPER_ENTITLEMENT
    s = f[10943];
    sli = li[10943];
    if (!sli) sli = li[10943] = {};
    addLIIfNotEmpty(sli, s, 15525, vm.oTH_SUPER_ENTITLEMENT_YearToDateSuperannuationGuaranteeEmployerContributionAmount);
    addLIIfNotEmpty(sli, s, 15521, vm.oTH_SUPER_ENTITLEMENT_YearToDateSuperannuationGuaranteeOrdinaryTimeEarningsAmount);
    addLIIfNotEmpty(sli, s, 25466, vm.oTH_SUPER_ENTITLEMENT_EmployerSuperannuationContributionReportableAmount);

    // OTH-TFN_DECLARATION
    s = f[11303];
    sli = li[11303];
    if (!sli) sli = li[11303] = {};
    addLIIfNotEmpty(sli, s, 25467, vm.oTH_TFN_DECLARATION_PayerPayeeRelationshipPaymentBasisCode);
    addLIIfNotEmpty(sli, s, 25468, vm.oTH_TFN_DECLARATION_PayeeClientResidentStatusCode);
    addLIIfNotEmpty(sli, s, 25469, vm.oTH_TFN_DECLARATION_PayerPayeeRelationshipTaxFreeThresholdClaimedIndicator);
    addLIIfNotEmpty(sli, s, 28130, vm.oTH_TFN_DECLARATION_PayerPayeeRelationshipStudyandTrainingLoanRepaymentClaimedIndicator);
    addLIIfNotEmpty(sli, s, 25476, vm.oTH_TFN_DECLARATION_PayerPayeeRelationshipStudentFinancialSupplementDebtClaimedIndicator);
    addLIIfNotEmpty(sli, s, 25478, vm.oTH_TFN_DECLARATION_PayeeDeclarationIndicator);
    addLIIfNotEmpty(sli, s, 25479, vm.oTH_TFN_DECLARATION_PayeeDeclarationDate);
    addLIIfNotEmpty(sli, s, 28352, vm.oTH_TFN_DECLARATION_PayerPayeeRelationshipTerminatedIndicator);
  }

  function mapLIToVM(li, vm) {
    var sli, i, l, m, sg, item,
        emptyRLI = new LineItem({ repeating: true, maxOccurrence: Limits.MAX_LINE_ITEM_OCCURRENCE });
    var li1, li2, li3, li4, li5;

    // OTH-PAYER_DTLS
    sli = li[10931] || {};
    setIfChanged(sli[16556], vm.oTH_PAYER_DTLS_ClientExternalID);
    setIfChanged(sli[14930], vm.oTH_PAYER_DTLS_ClientExternalIdentifierTypeCode);
    setIfChanged(sli[16557], vm.oTH_PAYER_DTLS_UnstructuredFullName);
    setIfChanged(sli[23930], vm.oTH_PAYER_DTLS_DerivedClientIdentifierAustralianBusinessNumber);
    setIfChanged(sli[23951], vm.oTH_PAYER_DTLS_DerivedUnstructuredFullName);
    setIfChanged(sli[15431], vm.oTH_PAYER_DTLS_BusinessMangamentSoftwareIdentifier);
    setIfChanged(sli[18449], vm.oTH_PAYER_DTLS_EmployerBranchCode);
    setIfChanged(sli[20472], vm.oTH_PAYER_DTLS_DerivedClientBranchNumber);

    // OTH-PAYEE_DTLS
    sli = li[10932] || {};
    setIfChanged(sli[16558], vm.oTH_PAYEE_DTLS_CurrentPayerPayeeRelationshipPayeePayrollIdentifier);
    setIfChanged(sli[25443], vm.oTH_PAYEE_DTLS_PayerPayeeRelationshipCommencementDate);
    setIfChanged(sli[25242], vm.oTH_PAYEE_DTLS_PayerPayeeRelationshipCessationDate);
    setIfChanged(sli[16560], vm.oTH_PAYEE_DTLS_ClientIdentifierTaxFileNumber);
    setIfChanged(sli[25444], vm.oTH_PAYEE_DTLS_ContractorClientIdentifierAustralianBusinessNumber);
    setIfChanged(sli[16561], vm.oTH_PAYEE_DTLS_StructuredFamilyName);
    setIfChanged(sli[16562], vm.oTH_PAYEE_DTLS_StructuredGivenName);
    setIfChanged(sli[16565], vm.oTH_PAYEE_DTLS_StructuredOtherGivenName);
    setIfChanged(sli[25445], vm.oTH_PAYEE_DTLS_IndividualBirthDate);
    setIfChanged(sli[16567], vm.oTH_PAYEE_DTLS_UnstructuredGeographicAddressLine1);
    setIfChanged(sli[16568], vm.oTH_PAYEE_DTLS_UnstructuredGeographicAddressLine2);
    setIfChanged(sli[16571], vm.oTH_PAYEE_DTLS_StructuredGeographicAddressLocalityName);
    setIfChanged(sli[16572], vm.oTH_PAYEE_DTLS_StructuredGeographicAddressStateCode);
    setIfChanged(sli[16573], vm.oTH_PAYEE_DTLS_StructuredGeographicAddressPostcode);
    setIfChanged(sli[16574], vm.oTH_PAYEE_DTLS_CountryCode);
    setIfChanged(sli[25446], vm.oTH_PAYEE_DTLS_PayeeInternetEmailAddress);
    setIfChanged(sli[25447], vm.oTH_PAYEE_DTLS_PayeeTelephoneNumber);

    // OTH-PAYROLL_EVNT
    sli = li[10933] || {};
    setIfChanged(sli[16580], vm.oTH_PAYROLL_EVNT_PayrollEventPeriodStartDate);
    setIfChanged(sli[16582], vm.oTH_PAYROLL_EVNT_PayrollEventPeriodEndDate);
    setIfChanged(sli[18450], vm.oTH_PAYROLL_EVNT_FinancialYear);
    setIfChanged(sli[16585], vm.oTH_PAYROLL_EVNT_LodgmentDate);
    setIfChanged(sli[16710], vm.oTH_PAYROLL_EVNT_PaymentDate);
    setIfChanged(sli[25451], vm.oTH_PAYROLL_EVNT_PayrollMessageTimestampSourceDatetime);
    setIfChanged(sli[25452], vm.oTH_PAYROLL_EVNT_PayrollEventFinalIndicator);

    // OTH-WAGE_AND_TAX_ITEM
    sli = li[10936] || {};
    setIfChanged(sli[15470], vm.oTH_WAGE_AND_TAX_ITEM_PayeeForeignIncomeExemptAmount);
    setIfChanged(sli[15488], vm.oTH_WAGE_AND_TAX_ITEM_PayeeIncomeCommunityDevelopmentEmploymentProjectAmount);
    setIfChanged(sli[16787], vm.oTH_WAGE_AND_TAX_ITEM_PayeeAnnualLongServiceLeaveUnusedLumpSumACode);
    setIfChanged(sli[15499], vm.oTH_WAGE_AND_TAX_ITEM_PayeeAnnualLongServiceLeaveUnusedLumpSumAAmount);
    setIfChanged(sli[15501], vm.oTH_WAGE_AND_TAX_ITEM_PayeeAnnualLongServiceLeaveUnusedLumpSumBAmount);
    setIfChanged(sli[15508], vm.oTH_WAGE_AND_TAX_ITEM_PayeeAnnualLongServiceLeaveUnusedLumpSumDAmount);
    setIfChanged(sli[15510], vm.oTH_WAGE_AND_TAX_ITEM_PayeeAnnualLongServiceLeaveUnusedLumpSumEAmount);
    setIfChanged(sli[15454], vm.oTH_WAGE_AND_TAX_ITEM_PayeeYearToDateIncomeGrossAmount);
    setIfChanged(sli[25455], vm.oTH_WAGE_AND_TAX_ITEM_PayeeForeignIncomeEmploymentGrossAmount);
    setIfChanged(sli[25456], vm.oTH_WAGE_AND_TAX_ITEM_PayeeForeignIncomeEmploymentJointPetroleumDevelopmentAreaGrossAmount);
    setIfChanged(sli[15456], vm.oTH_WAGE_AND_TAX_ITEM_PayeeIncomeLabourHireArrangementGrossAmount);
    setIfChanged(sli[15518], vm.oTH_WAGE_AND_TAX_ITEM_PayeeIncomeVoluntaryAgreementGrossAmount);
    setIfChanged(sli[25457], vm.oTH_WAGE_AND_TAX_ITEM_PayeeIncomeOtherAmount);
    setIfChanged(sli[27454], vm.oTH_WAGE_AND_TAX_ITEM_PayeeIncomeWorkingHolidayMakerYearToDateGrossAmount);
    setIfChanged(sli[25458], vm.oTH_WAGE_AND_TAX_ITEM_PayeeFringeBenefitsReportableTaxableAmount);
    setIfChanged(sli[25459], vm.oTH_WAGE_AND_TAX_ITEM_PayeeFringeBenefitsReportableExemptAmount);
    setIfChanged(sli[16820], vm.oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingYearToDateWithheldAmount);
    setIfChanged(sli[25460], vm.oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingForeignEmploymentIncomeTotalAmount);
    setIfChanged(sli[25461], vm.oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingForeignEmploymentIncomeJointPetroleumDevelopmentAreaTotalAmount);
    setIfChanged(sli[25462], vm.oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingLabourHireTotalAmount);
    setIfChanged(sli[25463], vm.oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingVoluntaryAgreementTotalAmount);
    setIfChanged(sli[25464], vm.oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingOtherSpecifiedTotalAmount);
    setIfChanged(sli[27455], vm.oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingWorkingHolidayMakerYearToDateTotalAmount);
    setIfChanged(sli[15523], vm.oTH_WAGE_AND_TAX_ITEM_YearToDateForeignIncomeEmploymentTaxCreditWithheldAmount);
    setIfChanged(sli[27456], vm.oTH_WAGE_AND_TAX_ITEM_JointPetroleumDevelopmentAreaForeignIncomeEmploymentTaxPaidYearToDateAmount);
    setIfChanged(sli[26716], vm.oTH_WAGE_AND_TAX_ITEM_PaymentSummaryTotalGrossPaymentAmount);
    setIfChanged(sli[26717], vm.oTH_WAGE_AND_TAX_ITEM_TaxWithheldTotalAmount);
    sg = vm.oTH_WAGE_AND_TAX_ITEM_SectionGroup5s();
    m = 0;
    if (li1 = sli[15453]) { if ((l = li1.values().length) > m) m = l; } else { li1 = emptyRLI; }
    if (li2 = sli[25453]) { if ((l = li2.values().length) > m) m = l; } else { li2 = emptyRLI; }
    if (li3 = sli[25454]) { if ((l = li3.values().length) > m) m = l; } else { li3 = emptyRLI; }
    if (li4 = sli[15489]) { if ((l = li4.values().length) > m) m = l; } else { li4 = emptyRLI; }
    if (li5 = sli[15496]) { if ((l = li5.values().length) > m) m = l; } else { li5 = emptyRLI; }
    if (m) {
      for (i = 0; i < m; i++) {
        item = sg[i] || (sg[i] = new vm.oTH_WAGE_AND_TAX_ITEM_SectionGroup5());
        setIfChanged(li1.i(i), item.oTH_WAGE_AND_TAX_ITEM_EmploymentTerminationPaymentTypeCode);
        setIfChanged(li2.i(i), item.oTH_WAGE_AND_TAX_ITEM_EmploymentTerminationPaymentPaymentDate);
        setIfChanged(li3.i(i), item.oTH_WAGE_AND_TAX_ITEM_EmploymentTerminationPaymentTaxWithheldTotalAmount);
        setIfChanged(li4.i(i), item.oTH_WAGE_AND_TAX_ITEM_EmploymentTerminationPaymentTaxFreeAmount);
        setIfChanged(li5.i(i), item.oTH_WAGE_AND_TAX_ITEM_EmploymentTerminationPaymentTaxableComponentAmount);
      }
    } else if (sg.length) vm.oTH_WAGE_AND_TAX_ITEM_SectionGroup5().RemoveAll();

    // OTH-DEDUCTION_ITEM
    sli = li[10939] || {};
    sg = vm.oTH_DEDUCTION_ITEM_SectionGroup3s();
    m = 0;
    if (li1 = sli[16825]) { if ((l = li1.values().length) > m) m = l; } else { li1 = emptyRLI; }
    if (li2 = sli[16833]) { if ((l = li2.values().length) > m) m = l; } else { li2 = emptyRLI; }
    if (m) {
      for (i = 0; i < m; i++) {
        item = sg[i] || (sg[i] = new vm.oTH_DEDUCTION_ITEM_SectionGroup3());
        setIfChanged(li1.i(i), item.oTH_DEDUCTION_ITEM_IndividualDeductionTypeCode);
        setIfChanged(li2.i(i), item.oTH_DEDUCTION_ITEM_IndividualDeductionYearToDateAmount);
      }
    } else if (sg.length) vm.oTH_DEDUCTION_ITEM_SectionGroup3().RemoveAll();

    // OTH-ALLOWANCE_ITEM
    sli = li[10941] || {};
    setIfChanged(sli[25465], vm.oTH_ALLOWANCE_ITEM_AllowanceIncomeTotalAmount);
    sg = vm.oTH_ALLOWANCE_ITEM_SectionGroup4s();
    m = 0;
    if (li1 = sli[16835]) { if ((l = li1.values().length) > m) m = l; } else { li1 = emptyRLI; }
    if (li2 = sli[15524]) { if ((l = li2.values().length) > m) m = l; } else { li2 = emptyRLI; }
    if (li3 = sli[16841]) { if ((l = li3.values().length) > m) m = l; } else { li3 = emptyRLI; }
    if (m) {
      for (i = 0; i < m; i++) {
        item = sg[i] || (sg[i] = new vm.oTH_ALLOWANCE_ITEM_SectionGroup4());
        setIfChanged(li1.i(i), item.oTH_ALLOWANCE_ITEM_AllowanceIncomeTypeCode);
        setIfChanged(li2.i(i), item.oTH_ALLOWANCE_ITEM_AllowanceIncomeTypeOtherDescriptionText);
        setIfChanged(li3.i(i), item.oTH_ALLOWANCE_ITEM_AllowanceIncomeYearToDateAmount);
      }
    } else if (sg.length) vm.oTH_ALLOWANCE_ITEM_SectionGroup4().RemoveAll();

    // OTH-SUPER_ENTITLEMENT
    sli = li[10943] || {};
    setIfChanged(sli[15525], vm.oTH_SUPER_ENTITLEMENT_YearToDateSuperannuationGuaranteeEmployerContributionAmount);
    setIfChanged(sli[15521], vm.oTH_SUPER_ENTITLEMENT_YearToDateSuperannuationGuaranteeOrdinaryTimeEarningsAmount);
    setIfChanged(sli[25466], vm.oTH_SUPER_ENTITLEMENT_EmployerSuperannuationContributionReportableAmount);

    // OTH-TFN_DECLARATION
    sli = li[11303] || {};
    setIfChanged(sli[25467], vm.oTH_TFN_DECLARATION_PayerPayeeRelationshipPaymentBasisCode);
    setIfChanged(sli[25468], vm.oTH_TFN_DECLARATION_PayeeClientResidentStatusCode);
    setIfChanged(sli[25469], vm.oTH_TFN_DECLARATION_PayerPayeeRelationshipTaxFreeThresholdClaimedIndicator);
    setIfChanged(sli[28130], vm.oTH_TFN_DECLARATION_PayerPayeeRelationshipStudyandTrainingLoanRepaymentClaimedIndicator);
    setIfChanged(sli[25476], vm.oTH_TFN_DECLARATION_PayerPayeeRelationshipStudentFinancialSupplementDebtClaimedIndicator);
    setIfChanged(sli[25478], vm.oTH_TFN_DECLARATION_PayeeDeclarationIndicator);
    setIfChanged(sli[25479], vm.oTH_TFN_DECLARATION_PayeeDeclarationDate);
    setIfChanged(sli[28352], vm.oTH_TFN_DECLARATION_PayerPayeeRelationshipTerminatedIndicator);
  }
});
