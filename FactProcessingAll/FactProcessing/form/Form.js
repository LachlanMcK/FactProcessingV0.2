"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
//import  mongoose from "mongoose";
//import * as mongoose  from "mongoose";
const myLog = __importStar(require("../../myLog"));
const mongoose = require("mongoose"); //https://stackoverflow.com/questions/34482136/mongoose-the-typescript-way
// define the shape of the Line Items part of Forms
const LineItemDef = {
    FieldId: String,
    FieldIndex: Number,
    Value: Object
};
let LineItemsSchema = new mongoose.Schema(LineItemDef);
// define the shape of the sections part of Forms
// sections are made up of Line Items
const SectionDef = {
    SectionId: String,
    SectionName: String,
    LineItems: [LineItemsSchema]
};
let SectionSchema = new mongoose.Schema(SectionDef);
// define the shape of Forms
// Forms are made up of Sections which are made up of Line Items
exports.FormDef = {
    ClientInternalId: {
        type: Number,
        required: false
    },
    AccountSequenceNumber: Number,
    RoleTypeCode: Number,
    PeriodStartDt: Date,
    FormType: {
        type: String,
        required: true
    },
    TransactionId: {
        type: Number,
        required: true
    },
    workItemId: String,
    Sections: [SectionSchema],
    createdAt: Date,
    updatedAt: Date,
    DT_Update: String,
    TM_Update: String,
    subjectClient: {
        ClientIdentifierType: String,
        ClientIdentifierValue: Number,
        MatchingStatus: String
    },
    ProcessingStatusCd: Number,
    ErrorCd: String,
    TransmissionDetails: {
        ClientIdentifierType: String,
        ClientIdentifierValue: Number,
        TransmissionBET: Number,
        TransmissionReference: Number,
        ThreadId: Number,
        RecordCount: Number
    }
};
let FormSchema = new mongoose.Schema(exports.FormDef, { discriminatorKey: 'kind' });
//This is the default
const FormCollectionDetails = {
    collection: 'Forms',
    versionKey: false
};
function setFootprintProperties(form, updateOnlyFlag) {
    const now = new Date();
    if ((form.DT_Update || form.TM_Update) && !(form.updatedAt))
        throw "updatedAt must exist if DT/TM_Updated fields are populated";
    if (!form.createdAt && !(updateOnlyFlag)) {
        //arguably don't need a createdAt field as it can be obtained from _id  https://docs.mongodb.com/manual/reference/method/ObjectId.getTimestamp/
        // form.createdAt = now;
        //should only set the createdAt when creating.  This feature should only matter if they forget to return the createdAt field on an update.
        //but if they do forget that, what else are they forgetting??
        form["$setOnInsert"] = { createdAt: now };
    }
    form.updatedAt = now;
    //todo: investigate making this virtual
    form.DT_Update = now.toLocaleDateString();
    form.TM_Update = now.toLocaleTimeString();
    return form;
}
exports.setFootprintProperties = setFootprintProperties;
FormSchema.index({ TransactionId: 1 }, { unique: true, name: "primary" });
FormSchema.index({ "subjectClient.ClientIdentifierValue": 1, "subjectClient.ClientIdentifierType": 1, "AccountSequenceNumber": 1, "RoleTypeCode": 1 }, { unique: false, name: "Carpat" });
FormSchema.index({ "subjectClient.ClientIdentifierValue": 1, "subjectClient.ClientIdentifierType": 1, "formType": 1 }, { unique: false, name: "clientExtIdByForm" });
FormSchema.index({ ClientInternalId: 1, formType: 1 }, { sparse: true, name: "clientIntIdByForm" });
FormSchema.index({ workItemId: 1 }, { sparse: true });
//todo: this is fine for dev but need to tidy this up
FormSchema.set('autoIndex', true);
//FormSchema.set('autoIndex', false);
exports.BaseForm = mongoose.model('Form', FormSchema);
let mongooseModels = {};
function Form(formType, formSpecificLineItemSchema) {
    if (!formType)
        return exports.BaseForm;
    if (!mongooseModels[formType]) {
        mongooseModels[formType] = exports.BaseForm.discriminator(formType, new mongoose.Schema(formSpecificLineItemSchema));
        myLog.debug("Additional " + formType + " line items schema definition ");
        myLog.log("Discriminated schema for: " + formType, formSpecificLineItemSchema);
    }
    myLog.debug("Returning discriminated schema for:" + formType);
    return mongooseModels[formType];
}
exports.Form = Form;
exports.HistorySchema = new mongoose.Schema({
    TransactionId: {
        type: Number,
        required: true
    },
    DT_Update: String,
    TM_Update: String,
    history: {}
}, { versionKey: false });
exports.HistorySchema.index({ TransactionId: 1, DT_Update: 1, TM_Update: 1 }, { unique: true, name: "primary" });
exports.HistoryForm = mongoose.model('FormHistory', exports.HistorySchema);
// export const PreFillSchema = new mongoose.Schema({
//   TransactionId: {
//     type: Number,
//     required: true
//   },
//   FormType: {
//     type: String,
//     required: true
//   },
//   subjectClient: {
//     ClientIdentifierType: String,
//     ClientIdentifierValue: Number
//   },
//   createdAt: Date,
//   updatedAt: Date,
//   DT_Update: String,
//   TM_Update: String,
//   facts: [mongoose.Schema.Types.Mixed]
// }, { versionKey: false });
// //PreFillSchema.index({ TransactionId: 1, FormType: 1 }, { unique: true, name: "primary" });
// export const PreFillForm: mongoose.Model<mongoose.Document> = mongoose.model('prefillIITR', PreFillSchema);
exports.PreFillSchema2 = new mongoose.Schema({
    facts: [mongoose.Schema.Types.Mixed]
}, { versionKey: false });
//todo: take out of facts collection
//      got to confess, I only did this because I could and it tickled my fancy to do so.  Saved me having to write separate Get/Delete (for testing)
//      but prefill structure doesn't really look like fact structure, so I shouldn't do this.
exports.PreFillForm = exports.BaseForm.discriminator('prefillIITRForm', new mongoose.Schema({ facts: [] }));
mongooseModels['prefillIITRForm'] = exports.PreFillForm;
//# sourceMappingURL=data:application/json;base64,