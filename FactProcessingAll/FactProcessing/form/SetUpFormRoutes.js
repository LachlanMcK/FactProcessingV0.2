"use strict";
// all this does is export an array of available get/put routes (URI permutations)
// ./FormController uses this info to register routes; it also registers a few other routes
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const myLog = __importStar(require("../../myLog"));
const clientLevel = '/:ClientIdentifierType/:ClientIdentifierValue';
const accountLevel = '/:ClientIdentifierType/:ClientIdentifierValue/Accounts/:AccountSequenceNumber';
const roleLevel = '/:ClientIdentifierType/:ClientIdentifierValue/Accounts/:AccountSequenceNumber/Roles/:RoleTypeShortDecode';
const roleOnlyLevel = '/:ClientIdentifierType/:ClientIdentifierValue/Roles/:RoleTypeShortDecode';
const carpatlevel = [clientLevel, accountLevel, roleLevel, roleOnlyLevel];
const period = ['/PeriodStartDt/:PeriodStartDt', ''];
const draftForm = '/DraftForms';
const processedForm = '/ProcessedForms';
const undecidedForm = '/Forms';
const defaultFormFlavours = [draftForm, processedForm, undecidedForm];
const formTypenoId = '/:FormTypeMung';
const formTypeWithId = '/:FormTypeMung/:TransactionId';
const formSuffix = [formTypenoId, formTypeWithId];
exports.formRoutes = [];
function setUpFormRoutes(router, overrides) {
    myLog.debug(`Adding route to routers....`);
    let formFlavours = overrides || defaultFormFlavours;
    carpatlevel.forEach((a) => period.forEach((b) => formFlavours.forEach((c) => formSuffix.forEach((d) => {
        let r = a + b + c + d;
        exports.formRoutes.push(r);
    }))));
    return exports.formRoutes;
}
exports.setUpFormRoutes = setUpFormRoutes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0VXBGb3JtUm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2V0VXBGb3JtUm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxrRkFBa0Y7QUFDbEYsMkZBQTJGOzs7Ozs7Ozs7QUFFM0YsbURBQXFDO0FBR3JDLE1BQU0sV0FBVyxHQUFHLCtDQUErQyxDQUFDO0FBQ3BFLE1BQU0sWUFBWSxHQUFHLCtFQUErRSxDQUFDO0FBQ3JHLE1BQU0sU0FBUyxHQUFHLDBHQUEwRyxDQUFDO0FBQzdILE1BQU0sYUFBYSxHQUFHLDBFQUEwRSxDQUFDO0FBQ2pHLE1BQU0sV0FBVyxHQUFHLENBQUMsV0FBVyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFFMUUsTUFBTSxNQUFNLEdBQUcsQ0FBQywrQkFBK0IsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUVyRCxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUM7QUFDaEMsTUFBTSxhQUFhLEdBQUcsaUJBQWlCLENBQUM7QUFDeEMsTUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDO0FBQy9CLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxTQUFTLEVBQUUsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBRXRFLE1BQU0sWUFBWSxHQUFHLGdCQUFnQixDQUFDO0FBQ3RDLE1BQU0sY0FBYyxHQUFHLCtCQUErQixDQUFDO0FBQ3ZELE1BQU0sVUFBVSxHQUFHLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBRXZDLFFBQUEsVUFBVSxHQUFZLEVBQUUsQ0FBQztBQUVwQyxTQUFnQixlQUFlLENBQUMsTUFBc0IsRUFBRSxTQUFvQjtJQUN4RSxLQUFLLENBQUMsS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7SUFDM0MsSUFBSSxZQUFZLEdBQUcsU0FBUyxJQUFJLG1CQUFtQixDQUFDO0lBQ3BELFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUNsRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEIsa0JBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDTixPQUFPLGtCQUFVLENBQUM7QUFDdEIsQ0FBQztBQVJELDBDQVFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gYWxsIHRoaXMgZG9lcyBpcyBleHBvcnQgYW4gYXJyYXkgb2YgYXZhaWxhYmxlIGdldC9wdXQgcm91dGVzIChVUkkgcGVybXV0YXRpb25zKVxyXG4vLyAuL0Zvcm1Db250cm9sbGVyIHVzZXMgdGhpcyBpbmZvIHRvIHJlZ2lzdGVyIHJvdXRlczsgaXQgYWxzbyByZWdpc3RlcnMgYSBmZXcgb3RoZXIgcm91dGVzXHJcblxyXG5pbXBvcnQgKiBhcyBteUxvZyBmcm9tICcuLi8uLi9teUxvZyc7XHJcbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XHJcblxyXG5jb25zdCBjbGllbnRMZXZlbCA9ICcvOkNsaWVudElkZW50aWZpZXJUeXBlLzpDbGllbnRJZGVudGlmaWVyVmFsdWUnO1xyXG5jb25zdCBhY2NvdW50TGV2ZWwgPSAnLzpDbGllbnRJZGVudGlmaWVyVHlwZS86Q2xpZW50SWRlbnRpZmllclZhbHVlL0FjY291bnRzLzpBY2NvdW50U2VxdWVuY2VOdW1iZXInO1xyXG5jb25zdCByb2xlTGV2ZWwgPSAnLzpDbGllbnRJZGVudGlmaWVyVHlwZS86Q2xpZW50SWRlbnRpZmllclZhbHVlL0FjY291bnRzLzpBY2NvdW50U2VxdWVuY2VOdW1iZXIvUm9sZXMvOlJvbGVUeXBlU2hvcnREZWNvZGUnO1xyXG5jb25zdCByb2xlT25seUxldmVsID0gJy86Q2xpZW50SWRlbnRpZmllclR5cGUvOkNsaWVudElkZW50aWZpZXJWYWx1ZS9Sb2xlcy86Um9sZVR5cGVTaG9ydERlY29kZSc7XHJcbmNvbnN0IGNhcnBhdGxldmVsID0gW2NsaWVudExldmVsLCBhY2NvdW50TGV2ZWwsIHJvbGVMZXZlbCwgcm9sZU9ubHlMZXZlbF07XHJcblxyXG5jb25zdCBwZXJpb2QgPSBbJy9QZXJpb2RTdGFydER0LzpQZXJpb2RTdGFydER0JywgJyddO1xyXG5cclxuY29uc3QgZHJhZnRGb3JtID0gJy9EcmFmdEZvcm1zJztcclxuY29uc3QgcHJvY2Vzc2VkRm9ybSA9ICcvUHJvY2Vzc2VkRm9ybXMnO1xyXG5jb25zdCB1bmRlY2lkZWRGb3JtID0gJy9Gb3Jtcyc7XHJcbmNvbnN0IGRlZmF1bHRGb3JtRmxhdm91cnMgPSBbZHJhZnRGb3JtLCBwcm9jZXNzZWRGb3JtLCB1bmRlY2lkZWRGb3JtXTtcclxuXHJcbmNvbnN0IGZvcm1UeXBlbm9JZCA9ICcvOkZvcm1UeXBlTXVuZyc7XHJcbmNvbnN0IGZvcm1UeXBlV2l0aElkID0gJy86Rm9ybVR5cGVNdW5nLzpUcmFuc2FjdGlvbklkJztcclxuY29uc3QgZm9ybVN1ZmZpeCA9IFtmb3JtVHlwZW5vSWQsIGZvcm1UeXBlV2l0aElkXTtcclxuXHJcbmV4cG9ydCBsZXQgZm9ybVJvdXRlczpzdHJpbmdbXSA9IFtdO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFVwRm9ybVJvdXRlcyhyb3V0ZXI6IGV4cHJlc3MuUm91dGVyLCBvdmVycmlkZXM/OiBzdHJpbmdbXSApOnN0cmluZ1tdIHtcclxuICAgIG15TG9nLmRlYnVnKGBBZGRpbmcgcm91dGUgdG8gcm91dGVycy4uLi5gKTtcclxuICAgIGxldCBmb3JtRmxhdm91cnMgPSBvdmVycmlkZXMgfHwgZGVmYXVsdEZvcm1GbGF2b3VycztcclxuICAgIGNhcnBhdGxldmVsLmZvckVhY2goKGEpID0+IHBlcmlvZC5mb3JFYWNoKChiKSA9PiBmb3JtRmxhdm91cnMuZm9yRWFjaCgoYykgPT4gZm9ybVN1ZmZpeC5mb3JFYWNoKChkKSA9PiB7XHJcbiAgICAgICAgbGV0IHIgPSBhICsgYiArIGMgKyBkO1xyXG4gICAgICAgIGZvcm1Sb3V0ZXMucHVzaChyKTtcclxuICAgIH0pKSkpO1xyXG4gICAgcmV0dXJuIGZvcm1Sb3V0ZXM7XHJcbn0iXX0=