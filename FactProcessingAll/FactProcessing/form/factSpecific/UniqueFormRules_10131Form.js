"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const myLog = __importStar(require("../../../myLog"));
exports.formMetaData = require("../../jsre/forms/oTH_PAYROLL_EVENT_CHILDForm.js");
const formDef = require("../../jsre/forms/oTH_PAYROLL_EVENT_CHILDMapping.js").oTH_PAYROLL_EVENT_CHILD;
exports.FormType = '10131';
exports.businessRulesLanguage = "JSRE";
exports.wireFormat = "JSRE";
const FormLineItemSchemaFromJSRE_1 = require("./FormLineItemSchemaFromJSRE");
let formDescription = { schema: {}, byId: {}, byName: {} };
try {
    formDescription = require('./FormSubSchema_10131Form.json');
}
catch (error) {
    formDescription = FormLineItemSchemaFromJSRE_1.getFormDescription(formDef, exports.formMetaData);
    require('fs').writeFileSync('./FactProcessing/form/factSpecific/FormSubSchema_10131Form.json', JSON.stringify(formDescription));
}
exports.lineItemsSchema_FormSpecific = formDescription.schema, exports.formMetaDataById = formDescription.byId, exports.formMetaDataByName = formDescription.byName;
myLog.debug("Additional " + exports.FormType + " line items schema definition ");
myLog.log("Additional " + exports.FormType + " line items schema definition ", JSON.stringify(exports.lineItemsSchema_FormSpecific));
function addToFormSpecificIdentityCriteria(identityCriteria, req, res) {
    identityCriteria["Payee Details.oTH_PAYEE_DTLS_StructuredGivenName"] = req.body[10932][16562]._value;
    identityCriteria["Payee Details.oTH_PAYEE_DTLS_StructuredFamilyName"] = req.body[10932][16561]._value;
    identityCriteria["Payee Details.oTH_PAYEE_DTLS_StructuredGeographicAddressPostcode"] = req.body[10932][16573]._value;
    identityCriteria["Payee Details.oTH_PAYEE_DTLS_IndividualBirthDate"] = req.body[10932][25445]._value;
    return identityCriteria;
}
exports.addToFormSpecificIdentityCriteria = addToFormSpecificIdentityCriteria;
function confirmCanTakeIdentityFromPriorLodgment(FormTypeMung, req, foundForm, res) {
    //check its OK for the new form to take its id from found form  
    //the following code is not actually needed as it is all in the find criteria
    let newForm = req.body;
    if (!newForm["10932"] || !foundForm["Payee Details"]) {
        newForm.subjectClient.MatchingStatus = "UnMatched";
        myLog.warn("(10131) confirmCanTakeIdentityFromPriorLodgment couldn't find section 10932 or Payee Details");
        return newForm;
    }
    try {
        if (newForm["10932"]["16562"]._value == foundForm["Payee Details"]["oTH_PAYEE_DTLS_StructuredGivenName"] &&
            newForm["10932"]["16561"]._value == foundForm["Payee Details"]["oTH_PAYEE_DTLS_StructuredFamilyName"] &&
            newForm["10932"]["16573"]._value == foundForm["Payee Details"]["oTH_PAYEE_DTLS_StructuredGeographicAddressPostcode"] &&
            newForm["10932"]["25445"]._value == foundForm["Payee Details"]["oTH_PAYEE_DTLS_IndividualBirthDate"].toISOString().substring(0, 10)) {
            newForm.subjectClient.ClientIdentifierType = foundForm.subjectClient.ClientIdentifierType;
            newForm.subjectClient.ClientIdentifierValue = foundForm.subjectClient.ClientIdentifierValue;
            newForm.subjectClient.MatchingStatus = foundForm.subjectClient.MatchingStatus;
            newForm.ClientInternalId = foundForm.ClientInternalId;
        }
        else
            newForm.subjectClient.MatchingStatus = "UnMatched";
    }
    catch (error) {
        myLog.error('Error Details: ' + error, newForm);
        //myLog.error(JSON.stringify(newForm));
        newForm.subjectClient.MatchingStatus = "UnMatched";
    }
    myLog.debug('(10131) confirmCanTakeIdentityFromPriorLodgment resulted in Matching Status : ' + newForm.subjectClient.MatchingStatus);
    return req;
}
exports.confirmCanTakeIdentityFromPriorLodgment = confirmCanTakeIdentityFromPriorLodgment;
function postPutPreReturnHook(formTypeMung, req, res) {
    return __awaiter(this, void 0, void 0, function* () {
        myLog.debug("Will do form specific fiddling here");
        return;
    });
}
exports.postPutPreReturnHook = postPutPreReturnHook;
function decideWhatToPutInPrefill(formTypeMung, meaningfulNameForm) {
    return __awaiter(this, void 0, void 0, function* () {
        myLog.debug("Will do form specific repliation here");
        const Lookup = {
            'FormType': "prefillIITR",
            "subjectClient.ClientIdentifierType": meaningfulNameForm.subjectClient.ClientIdentifierType,
            "subjectClient.ClientIdentifierValue": meaningfulNameForm.subjectClient.ClientIdentifierValue,
            'facts': {
                $elemMatch: {
                    'Payee Details.oTH_PAYEE_DTLS_CurrentPayerPayeeRelationshipPayeePayrollIdentifier': meaningfulNameForm["Payee Details"].oTH_PAYEE_DTLS_CurrentPayerPayeeRelationshipPayeePayrollIdentifier,
                    'Payer Details.oTH_PAYER_DTLS_ClientExternalIdentifierTypeCode': meaningfulNameForm["Payer Details"].oTH_PAYER_DTLS_ClientExternalIdentifierTypeCode,
                    'Payer Details.oTH_PAYER_DTLS_ClientExternalID': meaningfulNameForm["Payer Details"].oTH_PAYER_DTLS_ClientExternalID,
                    'Payer Details.oTH_PAYER_DTLS_BusinessMangamentSoftwareIdentifier': meaningfulNameForm["Payer Details"].oTH_PAYER_DTLS_BusinessMangamentSoftwareIdentifier,
                    'Payer Details.oTH_PAYER_DTLS_EmployerBranchCode': meaningfulNameForm["Payer Details"].oTH_PAYER_DTLS_EmployerBranchCode,
                    'Payroll Event.oTH_PAYROLL_EVNT_FinancialYear': meaningfulNameForm["Payroll Event"].oTH_PAYROLL_EVNT_FinancialYear,
                    'Payroll Event.oTH_PAYROLL_EVNT_PayrollEventPeriodEndDate': { "$lte": meaningfulNameForm["Payroll Event"].oTH_PAYROLL_EVNT_PayrollEventPeriodEndDate }
                }
            }
        };
        const Insert = {
            "FormType": "prefillIITR",
            "subjectClient.ClientIdentifierType": meaningfulNameForm.subjectClient.ClientIdentifierType,
            "subjectClient.ClientIdentifierValue": meaningfulNameForm.subjectClient.ClientIdentifierValue,
            "$setOnInsert": {
                TransactionId: Date.now(),
                createdAt: new Date(),
                updatedAt: new Date(),
                DT_Update: new Date().toLocaleDateString(),
                TM_Update: new Date().toLocaleTimeString()
            },
            "$push": { "facts": meaningfulNameForm }
        };
        const Update = {
            "FormType": "prefillIITR",
            "subjectClient.ClientIdentifierType": meaningfulNameForm.subjectClient.ClientIdentifierType,
            "subjectClient.ClientIdentifierValue": meaningfulNameForm.subjectClient.ClientIdentifierValue,
            "$set": {
                "facts.$": meaningfulNameForm,
                updatedAt: new Date(),
                DT_Update: new Date().toLocaleDateString(),
                TM_Update: new Date().toLocaleTimeString()
            }
        };
        return [{ prefillLookup: Lookup, prefillInsert: Insert, prefillUpdate: Update }];
    });
}
exports.decideWhatToPutInPrefill = decideWhatToPutInPrefill;
const UniqueFormRules_bulkTransmissionForm_1 = require("./UniqueFormRules_bulkTransmissionForm"); //directly coupling to bulkTransmissionForm
function bulkTransmissionTracking(formTypeMung, req, res, meaningfulNameForm) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!meaningfulNameForm.TransmissionDetails || !meaningfulNameForm.TransmissionDetails.TransmissionBET)
            return null;
        const Lookup = {
            TransactionId: meaningfulNameForm.TransmissionDetails.TransmissionBET,
            FormType: "bulkTransmission"
        };
        if (!meaningfulNameForm.TransmissionDetails.ClientIdentifierType)
            meaningfulNameForm.TransmissionDetails.ClientIdentifierType = "ABN";
        if (!meaningfulNameForm.TransmissionDetails.ClientIdentifierValue)
            myLog.warn("TransmissionDetails.ClientIdentifierValue should be present when TransmissionBET is used");
        if (!meaningfulNameForm.TransmissionDetails.ClientIdentifierValue)
            meaningfulNameForm.TransmissionDetails.ClientIdentifierValue = -1;
        const upsertBody = {
            $setOnInsert: {
                TransactionId: meaningfulNameForm.TransmissionDetails.TransmissionBET,
                "subjectClient.ClientIdentifierType": meaningfulNameForm.TransmissionDetails.ClientIdentifierType,
                "subjectClient.ClientIdentifierValue": meaningfulNameForm.TransmissionDetails.ClientIdentifierValue,
                //gee, looks like I've developed a bit of a stutter here!!  The reason I'm doing it is so the info on the control record looks like the info in the separate facts
                "TransmissionDetails.TransmissionBET": meaningfulNameForm.TransmissionDetails.TransmissionBET,
                "TransmissionDetails.ClientIdentifierType": meaningfulNameForm.TransmissionDetails.ClientIdentifierType,
                "TransmissionDetails.ClientIdentifierValue": meaningfulNameForm.TransmissionDetails.ClientIdentifierValue,
                createdAt: new Date()
            },
            $set: {
                updatedAt: new Date(),
                DT_Update: new Date().toLocaleDateString(),
                TM_Update: new Date().toLocaleTimeString()
            },
            $inc: {
                "TransmissionDetails.RecordCount": 1
            }
        };
        return { lookupFilter: Lookup, upsertBody: upsertBody, schema: UniqueFormRules_bulkTransmissionForm_1.lineItemsSchema_FormSpecific };
    });
}
exports.bulkTransmissionTracking = bulkTransmissionTracking;
//I've only done a 1/2 assed job of doing this mapping.  Good enough to check the code works.  
//Todo: Need to to make this mapping correct.
function transformFromSBR(f) {
    if (!f.PAYEVNTEMP)
        return "Failed to transform: Not a payroll event";
    try {
        let sbrForm = f.PAYEVNTEMP;
        let newForm = {};
        newForm[10931] = {};
        newForm.Transmission = {};
        newForm.DT_Update = sbrForm.Transmission[0].TransmissionD[0];
        newForm.TM_Update = sbrForm.Transmission[0].TransmissionT[0];
        newForm.updatedAt = new Date(newForm.DT_Update + ":" + newForm.TM_Update);
        newForm.Transmission.BetNumber = sbrForm.Transmission[0].BusinessEventTrackingN[0];
        newForm.Transmission.RecordNumber = sbrForm.Transmission[0].TransmissionRecordN[0];
        newForm.Transmission.BMSId = sbrForm.Transmission[0].SoftwareInformation[0].BusinessManagementSystemId[0];
        newForm.Payer = {};
        newForm.Payer.ClientExternalIdentiferType = sbrForm.Payer[0].ClientExternalIdentiferType[0];
        newForm.Payer.ClientExternalIdentiferValue = sbrForm.Payer[0].ClientExternalIdentiferValue[0];
        newForm.Payer.ClientInternalIdentifier = sbrForm.Payer[0].ClientInternalIdentifier[0];
        newForm.Payer.OrganisationalDetails = {};
        newForm.Payer.OrganisationalDetails.OrganisationNameT = sbrForm.Payer[0].OrganisationalDetails[0].OrganisationNameT[0];
        newForm.Payer.OrganisationalDetails.OrganisatioalBranchC = sbrForm.Payer[0].OrganisationalDetails[0].OrganisatioalBranchC[0];
        newForm[10931][16556] = sbrForm.Payer[0].ClientExternalIdentiferValue[0]; //"oTH_PAYER_DTLS_ClientExternalID"
        newForm[10931][14930] = sbrForm.Payer[0].ClientExternalIdentiferType[0]; //oTH_PAYER_DTLS_ClientExternalIdentifierTypeCode";
        newForm[10931][16557] = sbrForm.Payer[0].OrganisationalDetails[0].OrganisationNameT[0]; //oTH_PAYER_DTLS_UnstructuredFullName";
        newForm[10931][23930] = ""; //oTH_PAYER_DTLS_DerivedClientIdentifierAustralianBusinessNumber";
        newForm[10931][23951] = ""; //oTH_PAYER_DTLS_DerivedUnstructuredFullName";
        newForm[10931][15431] = sbrForm.Transmission[0].SoftwareInformation[0].BusinessManagementSystemId[0]; //oTH_PAYER_DTLS_BusinessMangamentSoftwareIdentifier";
        newForm[10931][18449] = sbrForm.Payer[0].OrganisationalDetails[0].OrganisatioalBranchC[0]; //oTH_PAYER_DTLS_EmployerBranchCode";
        newForm[10931][20472] = ""; //oTH_PAYER_DTLS_DerivedClientBranchNumber";
        newForm[10932] = {};
        newForm[10932][16558] = sbrForm.Payee[0].Identifiers[0].EmploymentPayrollNumberId[0]; //oTH_PAYEE_DTLS_CurrentPayerPayeeRelationshipPayeePayrollIdentifier";
        newForm[10932][25443] = sbrForm.Payee[0].EmployerConditions[0].EmploymentStartD[0]; //oTH_PAYEE_DTLS_PayerPayeeRelationshipCommencementDate";
        newForm[10932][25242] = sbrForm.Payee[0].EmployerConditions[0].EmploymentEndD[0]; //oTH_PAYEE_DTLS_PayerPayeeRelationshipCessationDate";
        newForm[10932][16560] = sbrForm.Payee[0].Identifiers[0].TaxFileNumberId[0]; //oTH_PAYEE_DTLS_ClientIdentifierTaxFileNumber";
        newForm[10932][25444] = sbrForm.Payee[0].Identifiers[0].AustralianBusinessNumberId[0]; //oTH_PAYEE_DTLS_ContractorClientIdentifierAustralianBusinessNumber";
        newForm[10932][16561] = sbrForm.Payee[0].PersonNameDetails[0].FamilyNameT[0]; //oTH_PAYEE_DTLS_StructuredFamilyName";
        newForm[10932][16562] = sbrForm.Payee[0].PersonNameDetails[0].GivenNameT[0]; //oTH_PAYEE_DTLS_StructuredGivenName";
        newForm[10932][16565] = sbrForm.Payee[0].PersonNameDetails[0].OtherGivenNameT[0]; //oTH_PAYEE_DTLS_StructuredOtherGivenName";
        newForm[10932][25445] = sbrForm.Payee[0].PersonDemographicDetailsBirth[0].Y[0] + "-" +
            ("0" + sbrForm.Payee[0].PersonDemographicDetailsBirth[0].M[0]).substr(-2, 2) + "-" +
            ("0" + sbrForm.Payee[0].PersonDemographicDetailsBirth[0].Dm[0]).substr(-2, 2); //oTH_PAYEE_DTLS_IndividualBirthDate";
        newForm[10932][16567] = sbrForm.Payee[0].AddressDetails[0].Line1T[0]; //oTH_PAYEE_DTLS_UnstructuredGeographicAddressLine1";
        newForm[10932][16568] = sbrForm.Payee[0].AddressDetails[0].Line2T[0]; //oTH_PAYEE_DTLS_UnstructuredGeographicAddressLine2";
        newForm[10932][16571] = sbrForm.Payee[0].AddressDetails[0].LocalityNameT[0]; //oTH_PAYEE_DTLS_StructuredGeographicAddressLocalityName";
        newForm[10932][16572] = sbrForm.Payee[0].AddressDetails[0].StateOrTerritoryC[0]; //oTH_PAYEE_DTLS_StructuredGeographicAddressStateCode";
        newForm[10932][16573] = sbrForm.Payee[0].AddressDetails[0].PostcodeT[0]; //oTH_PAYEE_DTLS_StructuredGeographicAddressPostcode";
        newForm[10932][16574] = sbrForm.Payee[0].AddressDetails[0].CountryC[0]; //oTH_PAYEE_DTLS_CountryCode";
        newForm[10932][25446] = sbrForm.Payee[0].ElectronicContact[0].ElectronicMailAddressT[0]; //oTH_PAYEE_DTLS_PayeeInternetEmailAddress";
        newForm[10932][25447] = sbrForm.Payee[0].ElectronicContact[0].TelephoneMinimalN[0]; //oTH_PAYEE_DTLS_PayeeTelephoneNumber";
        newForm[10933] = {};
        newForm[10933][16580] = sbrForm.Payee[0].PayrollPeriod[0].StartD[0]; //oTH_PAYROLL_EVNT_PayrollEventPeriodStartDate";
        newForm[10933][16582] = sbrForm.Payee[0].PayrollPeriod[0].EndD[0]; //oTH_PAYROLL_EVNT_PayrollEventPeriodEndDate";
        newForm[10933][18450] = ""; //oTH_PAYROLL_EVNT_FinancialYear";
        newForm[10933][16585] = new Date().toISOString().split('T')[0]; //oTH_PAYROLL_EVNT_LodgmentDate";
        newForm[10933][16710] = ""; //oTH_PAYROLL_EVNT_PaymentDate";
        newForm[10933][25451] = ""; //oTH_PAYROLL_EVNT_PayrollMessageTimestampSourceDatetime";
        newForm[10933][25452] = sbrForm.Payee[0].PayrollPeriod[0].RemunerationPayrollEventFinalI[0]; //oTH_PAYROLL_EVNT_PayrollEventFinalIndicator";
        newForm[10936] = {};
        newForm[10936][15470] = sbrForm.Payee[0].PayrollPeriod[0].RemunerationCollection[0].Remuneration[0].IndividualNonBusinessExemptForeignEmploymentIncomeA[0]; //oTH_WAGE_AND_TAX_ITEM_PayeeForeignIncomeExemptAmount";
        newForm[10936][15488] = sbrForm.Payee[0].PayrollPeriod[0].RemunerationCollection[0].Remuneration[0].IndividualNonBusinessCommunityDevelopmentEmploymentProjectA[0]; //oTH_WAGE_AND_TAX_ITEM_PayeeIncomeCommunityDevelopmentEmploymentProjectAmount";
        let count = 0;
        sbrForm.Payee[0].PayrollPeriod[0].RemunerationCollection.map((r) => {
            if (count == 0) {
                newForm[10936][15453] = [];
                newForm[10936][25453] = [];
                newForm[10936][25454] = [];
                newForm[10936][15489] = [];
                newForm[10936][15496] = [];
            }
            newForm[10936][15453][count] = r.Remuneration[0].EmploymentTerminationPaymentCollection[0].EmploymentTerminationPayment[0].IncomeTaxPayAsYouGoWithholdingTypeC[0]; //oTH_WAGE_AND_TAX_ITEM_SectionGroup5", "oTH_WAGE_AND_TAX_ITEM_EmploymentTerminationPaymentTypeCode";
            newForm[10936][25453][count] = r.Remuneration[0].EmploymentTerminationPaymentCollection[0].EmploymentTerminationPayment[0].IncomeD[0]; //oTH_WAGE_AND_TAX_ITEM_SectionGroup5", "oTH_WAGE_AND_TAX_ITEM_EmploymentTerminationPaymentPaymentDate";
            newForm[10936][25454][count] = r.Remuneration[0].EmploymentTerminationPaymentCollection[0].EmploymentTerminationPayment[0].IncomePayAsYouGoWithholdingA[0]; //oTH_WAGE_AND_TAX_ITEM_SectionGroup5", "oTH_WAGE_AND_TAX_ITEM_EmploymentTerminationPaymentTaxWithheldTotalAmount";
            newForm[10936][15489][count] = r.Remuneration[0].EmploymentTerminationPaymentCollection[0].EmploymentTerminationPayment[0].IncomeTaxFreeA[0]; //oTH_WAGE_AND_TAX_ITEM_SectionGroup5", "oTH_WAGE_AND_TAX_ITEM_EmploymentTerminationPaymentTaxFreeAmount";
            newForm[10936][15496][count] = r.Remuneration[0].EmploymentTerminationPaymentCollection[0].EmploymentTerminationPayment[0].IncomeTaxableA[0]; //oTH_WAGE_AND_TAX_ITEM_SectionGroup5", "oTH_WAGE_AND_TAX_ITEM_EmploymentTerminationPaymentTaxableComponentAmount";
            count++;
        });
        newForm[10936][16787] = sbrForm.Payee[0].PayrollPeriod[0].RemunerationCollection[0].Remuneration[0].LumpSumCollection[0].LumpSum[0].TypeC[0]; //oTH_WAGE_AND_TAX_ITEM_PayeeAnnualLongServiceLeaveUnusedLumpSumACode";
        newForm[10936][15499] = ['R', 'W', 'T'].includes(sbrForm.Payee[0].PayrollPeriod[0].RemunerationCollection[0].Remuneration[0].LumpSumCollection[0].LumpSum[0].TypeC[0]) ? sbrForm.Payee[0].PayrollPeriod[0].RemunerationCollection[0].Remuneration[0].LumpSumCollection[0].LumpSum[0].PaymentsA[0] : 0; //oTH_WAGE_AND_TAX_ITEM_PayeeAnnualLongServiceLeaveUnusedLumpSumAAmount";
        newForm[10936][15501] = sbrForm.Payee[0].PayrollPeriod[0].RemunerationCollection[0].Remuneration[0].LumpSumCollection[0].LumpSum[0].TypeC[0] == 'B' ? sbrForm.Payee[0].PayrollPeriod[0].LumpSumCollection[0].LumpSum[0].PaympaidentsA[0] : 0; //oTH_WAGE_AND_TAX_ITEM_PayeeAnnualLongServiceLeaveUnusedLumpSumBAmount";
        newForm[10936][15508] = sbrForm.Payee[0].PayrollPeriod[0].RemunerationCollection[0].Remuneration[0].LumpSumCollection[0].LumpSum[0].TypeC[0] == 'D' ? sbrForm.Payee[0].PayrollPeriod[0].LumpSumCollection[0].LumpSum[0].PaymentsA[0] : 0; //oTH_WAGE_AND_TAX_ITEM_PayeeAnnualLongServiceLeaveUnusedLumpSumDAmount";
        newForm[10936][15510] = sbrForm.Payee[0].PayrollPeriod[0].RemunerationCollection[0].Remuneration[0].LumpSumCollection[0].LumpSum[0].TypeC[0] == 'E' ? sbrForm.Payee[0].PayrollPeriod[0].LumpSumCollection[0].LumpSum[0].PaymentsA[0] : 0; //oTH_WAGE_AND_TAX_ITEM_PayeeAnnualLongServiceLeaveUnusedLumpSumEAmount";
        newForm[10936][15454] = sbrForm.Payee[0].PayrollPeriod[0].RemunerationCollection[0].Remuneration[0].GrossA[0]; //oTH_WAGE_AND_TAX_ITEM_PayeeYearToDateIncomeGrossAmount";
        newForm[10936][25455] = sbrForm.Payee[0].PayrollPeriod[0].RemunerationCollection[0].Remuneration[0].IndividualNonBusinessExemptForeignEmploymentIncomeA[0]; //oTH_WAGE_AND_TAX_ITEM_PayeeForeignIncomeEmploymentGrossAmount";
        newForm[10936][25456] = 0; //oTH_WAGE_AND_TAX_ITEM_PayeeForeignIncomeEmploymentJointPetroleumDevelopmentAreaGrossAmount";
        newForm[10936][15456] = 0; //oTH_WAGE_AND_TAX_ITEM_PayeeIncomeLabourHireArrangementGrossAmount";
        newForm[10936][15518] = 0; //oTH_WAGE_AND_TAX_ITEM_PayeeIncomeVoluntaryAgreementGrossAmount";
        newForm[10936][25457] = 0; //oTH_WAGE_AND_TAX_ITEM_PayeeIncomeOtherAmount";
        newForm[10936][27454] = 0; //oTH_WAGE_AND_TAX_ITEM_PayeeIncomeWorkingHolidayMakerYearToDateGrossAmount";
        newForm[10936][25458] = sbrForm.Payee[0].PayrollPeriod[0].IncomeFringeBenefitsReportableCollection[0].IncomeFringeBenefitsReportable[0].FringeBenefitsReportableExemptionC[0] == 'T' ? sbrForm.Payee[0].PayrollPeriod[0].IncomeFringeBenefitsReportableCollection[0].IncomeFringeBenefitsReportable[0].A[0] : 0; //oTH_WAGE_AND_TAX_ITEM_PayeeFringeBenefitsReportableTaxableAmount";
        newForm[10936][25459] = sbrForm.Payee[0].PayrollPeriod[0].IncomeFringeBenefitsReportableCollection[0].IncomeFringeBenefitsReportable[0].FringeBenefitsReportableExemptionC[0] !== 'T' ? sbrForm.Payee[0].PayrollPeriod[0].IncomeFringeBenefitsReportableCollection[0].IncomeFringeBenefitsReportable[0].A[0] : 0; //oTH_WAGE_AND_TAX_ITEM_PayeeFringeBenefitsReportableExemptAmount";
        newForm[10936][16820] = sbrForm.Payee[0].PayrollPeriod[0].RemunerationCollection[0].Remuneration[0].IncomeTaxPayAsYouGoWithholdingTaxWithheldA[0]; //oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingYearToDateWithheldAmount";
        newForm[10936][25460] = sbrForm.Payee[0].PayrollPeriod[0].RemunerationCollection[0].Remuneration[0].IncomeTaxForeignWithholdingA[0]; //oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingForeignEmploymentIncomeTotalAmount";
        newForm[10936][25461] = 0; //oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingForeignEmploymentIncomeJointPetroleumDevelopmentAreaTotalAmount";
        newForm[10936][25462] = 0; //oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingLabourHireTotalAmount";
        newForm[10936][25463] = 0; //oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingVoluntaryAgreementTotalAmount";
        newForm[10936][25464] = 0; //oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingOtherSpecifiedTotalAmount";
        newForm[10936][27455] = 0; //oTH_WAGE_AND_TAX_ITEM_PayAsYouGoWithholdingWorkingHolidayMakerYearToDateTotalAmount";
        newForm[10936][15523] = sbrForm.Payee[0].PayrollPeriod[0].RemunerationCollection[0].Remuneration[0].IncomeTaxForeignWithholdingA[0]; //oTH_WAGE_AND_TAX_ITEM_YearToDateForeignIncomeEmploymentTaxCreditWithheldAmount";
        newForm[10936][27456] = 0; //oTH_WAGE_AND_TAX_ITEM_JointPetroleumDevelopmentAreaForeignIncomeEmploymentTaxPaidYearToDateAmount";
        newForm[10936][26716] = sbrForm.Payee[0].PayrollPeriod[0].RemunerationCollection[0].Remuneration[0].GrossA[0]; //oTH_WAGE_AND_TAX_ITEM_PaymentSummaryTotalGrossPaymentAmount";
        newForm[10936][26717] = 0; //oTH_WAGE_AND_TAX_ITEM_TaxWithheldTotalAmount";
        newForm[10939] = {};
        count = 0;
        sbrForm.Payee[0].PayrollPeriod[0].DeductionCollection.map((d) => {
            if (count == 0) {
                newForm[10939][16825] = [];
                newForm[10939][16833] = [];
            }
            newForm[10939][16825][count] = d.Deduction[0].RemunerationTypeC[0]; //oTH_DEDUCTION_ITEM_SectionGroup3", "oTH_DEDUCTION_ITEM_IndividualDeductionTypeCode";
            newForm[10939][16833][count] = d.Deduction[0].RemunerationA[0]; //oTH_DEDUCTION_ITEM_SectionGroup3", "oTH_DEDUCTION_ITEM_IndividualDeductionYearToDateAmount";
            count++;
        });
        count = 0;
        newForm[10939] = {};
        sbrForm.Payee[0].PayrollPeriod[0].RemunerationCollection[0].Remuneration[0].AllowanceCollection.map((a) => {
            if (count == 0) {
                newForm[10939][16835] = [];
                newForm[10939][15524] = [];
                newForm[10939][16841] = [];
            }
            newForm[10939][16835][count] = a.Allowance[0].TypeC[0]; //oTH_ALLOWANCE_ITEM_SectionGroup4", "oTH_ALLOWANCE_ITEM_AllowanceIncomeTypeCode";
            newForm[10939][15524][count] = a.Allowance[0].OtherAllowanceTypeDe[0]; //oTH_ALLOWANCE_ITEM_SectionGroup4", "oTH_ALLOWANCE_ITEM_AllowanceIncomeTypeOtherDescriptionText";
            newForm[10939][16841][count] = a.Allowance[0].EmploymentAllowancesA[0]; //oTH_ALLOWANCE_ITEM_SectionGroup4", "oTH_ALLOWANCE_ITEM_AllowanceIncomeYearToDateAmount";
        });
        newForm[10941] = {};
        newForm[10941][25465] = 0; //oTH_ALLOWANCE_ITEM_AllowanceIncomeTotalAmount";
        newForm[10943] = {};
        newForm[10943][15525] = sbrForm.Payee[0].PayrollPeriod[0].SuperannuationContributionCollection[0].SuperannuationContribution[0].EmployerContributionsYearToDateA[0]; //oTH_SUPER_ENTITLEMENT_YearToDateSuperannuationGuaranteeEmployerContributionAmount";
        newForm[10943][15521] = 0; //oTH_SUPER_ENTITLEMENT_YearToDateSuperannuationGuaranteeOrdinaryTimeEarningsAmount";
        newForm[10943][25466] = 0; //oTH_SUPER_ENTITLEMENT_EmployerSuperannuationContributionReportableAmount";
        newForm[11303] = {};
        newForm[11303][25467] = sbrForm.Payee[0].EmployerConditions[0].PaymentBasisC[0]; //oTH_TFN_DECLARATION_PayerPayeeRelationshipPaymentBasisCode";
        newForm[11303][25468] = ""; //oTH_TFN_DECLARATION_PayeeClientResidentStatusCode";
        newForm[11303][25469] = ""; //oTH_TFN_DECLARATION_PayerPayeeRelationshipTaxFreeThresholdClaimedIndicator";
        newForm[11303][28130] = ""; //oTH_TFN_DECLARATION_PayerPayeeRelationshipStudyandTrainingLoanRepaymentClaimedIndicator";
        newForm[11303][25476] = ""; //oTH_TFN_DECLARATION_PayerPayeeRelationshipStudentFinancialSupplementDebtClaimedIndicator";
        newForm[11303][25478] = ""; //oTH_TFN_DECLARATION_PayeeDeclarationIndicator";
        newForm[11303][25479] = ""; //oTH_TFN_DECLARATION_PayeeDeclarationDate";
        newForm[11303][28352] = ""; //oTH_TFN_DECLARATION_PayerPayeeRelationshipTerminatedIndicator" 
        //Don't know where to map:
        // Payee.EmployerConditions.TaxTreatmentC
        // Payee.EmployerConditions.TaxOffsetClaimTotalA
        // Payee.PayrollPeriod.RemunerationCollection.Remuneration.IncomeStreamTypeC
        // Payee.PayrollPeriod.RemunerationCollection.Remuneration.AddressDetailsCountryC
        // Payee.PayrollPeriod.RemunerationCollection.Remuneration.OvertimePaymentA
        // Payee.PayrollPeriod.RemunerationCollection.Remuneration.GrossBonusesAndCommissionsA
        // Payee.PayrollPeriod.RemunerationCollection.Remuneration.GrossDirectorsFeesA
        // Payee.PayrollPeriod.RemunerationCollection.Remuneration.IndividualNonBusinessCommunityDevelopmentEmploymentProjectA
        // Payee.PayrollPeriod.RemunerationCollection.Remuneration.SalarySacrificeCollection.SalarySacrifice.TypeC
        // Payee.PayrollPeriod.RemunerationCollection.Remuneration.SalarySacrificeCollection.SalarySacrifice.PaymentA
        // Payee.PayrollPeriod.RemunerationCollection.Remuneration.SuperannuationContributionCollection.SuperannuationContribution.EntitlementTypeC
        return newForm;
    }
    catch (err) {
        return " " + err;
    }
}
exports.transformFromSBR = transformFromSBR;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVW5pcXVlRm9ybVJ1bGVzXzEwMTMxRm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlVuaXF1ZUZvcm1SdWxlc18xMDEzMUZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsc0RBQXdDO0FBQzNCLFFBQUEsWUFBWSxHQUFHLE9BQU8sQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO0FBQ3ZGLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxvREFBb0QsQ0FBQyxDQUFDLHVCQUF1QixDQUFDO0FBQ3pGLFFBQUEsUUFBUSxHQUFHLE9BQU8sQ0FBQztBQUNuQixRQUFBLHFCQUFxQixHQUFHLE1BQU0sQ0FBQztBQUMvQixRQUFBLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFFakMsNkVBQWtFO0FBQ2xFLElBQUksZUFBZSxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUUzRCxJQUFJO0lBQUUsZUFBZSxHQUFHLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0NBQUU7QUFDcEUsT0FBTyxLQUFLLEVBQUU7SUFDVixlQUFlLEdBQUcsK0NBQWtCLENBQUMsT0FBTyxFQUFFLG9CQUFZLENBQUMsQ0FBQztJQUM1RCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsYUFBYSxDQUFDLGlFQUFpRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztDQUNuSTtBQUVZLFFBQUEsNEJBQTRCLEdBQUcsZUFBZSxDQUFDLE1BQU0sRUFBRSxRQUFBLGdCQUFnQixHQUFHLGVBQWUsQ0FBQyxJQUFJLEVBQUUsUUFBQSxrQkFBa0IsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDO0FBRXpKLEtBQUssQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLGdCQUFRLEdBQUcsZ0NBQWdDLENBQUMsQ0FBQztBQUN6RSxLQUFLLENBQUMsR0FB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Q0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUEsQ0FBQywyRkFBMkY7UUFDdEgsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQSxDQUFDLDRGQUE0RjtRQUN2SCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFBLENBQUMsaURBQWlEO1FBQzVFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUEsQ0FBQyw0Q0FBNEM7UUFDdkUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQSxDQUFDLGlFQUFpRTtRQUM1RiwwQkFBMEI7UUFDMUIseUNBQXlDO1FBQ3pDLGdEQUFnRDtRQUNoRCw0RUFBNEU7UUFDNUUsaUZBQWlGO1FBQ2pGLDJFQUEyRTtRQUMzRSxzRkFBc0Y7UUFDdEYsOEVBQThFO1FBQzlFLHNIQUFzSDtRQUN0SCwwR0FBMEc7UUFDMUcsNkdBQTZHO1FBQzdHLDJJQUEySTtRQUMzSSxPQUFPLE9BQU8sQ0FBQztLQUVsQjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1YsT0FBTyxHQUFHLEdBQUcsR0FBRyxDQUFDO0tBQ3BCO0FBQ0wsQ0FBQztBQTFLRCw0Q0EwS0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBteUxvZyBmcm9tICcuLi8uLi8uLi9teUxvZyc7XHJcbmV4cG9ydCBjb25zdCBmb3JtTWV0YURhdGEgPSByZXF1aXJlKFwiLi4vLi4vanNyZS9mb3Jtcy9vVEhfUEFZUk9MTF9FVkVOVF9DSElMREZvcm0uanNcIik7XHJcbmNvbnN0IGZvcm1EZWYgPSByZXF1aXJlKFwiLi4vLi4vanNyZS9mb3Jtcy9vVEhfUEFZUk9MTF9FVkVOVF9DSElMRE1hcHBpbmcuanNcIikub1RIX1BBWVJPTExfRVZFTlRfQ0hJTEQ7XHJcbmV4cG9ydCBjb25zdCBGb3JtVHlwZSA9ICcxMDEzMSc7XHJcbmV4cG9ydCBjb25zdCBidXNpbmVzc1J1bGVzTGFuZ3VhZ2UgPSBcIkpTUkVcIjtcclxuZXhwb3J0IGNvbnN0IHdpcmVGb3JtYXQgPSBcIkpTUkVcIjtcclxuXHJcbmltcG9ydCB7IGdldEZvcm1EZXNjcmlwdGlvbiB9IGZyb20gXCIuL0Zvcm1MaW5lSXRlbVNjaGVtYUZyb21KU1JFXCI7XHJcbmxldCBmb3JtRGVzY3JpcHRpb24gPSB7IHNjaGVtYToge30sIGJ5SWQ6IHt9LCBieU5hbWU6IHt9IH07XHJcblxyXG50cnkgeyBmb3JtRGVzY3JpcHRpb24gPSByZXF1aXJlKCcuL0Zvcm1TdWJTY2hlbWFfMTAxMzFGb3JtLmpzb24nKTsgfVxyXG5jYXRjaCAoZXJyb3IpIHtcclxuICAgIGZvcm1EZXNjcmlwdGlvbiA9IGdldEZvcm1EZXNjcmlwdGlvbihmb3JtRGVmLCBmb3JtTWV0YURhdGEpO1xyXG4gICAgcmVxdWlyZSgnZnMnKS53cml0ZUZpbGVTeW5jKCcuL0ZhY3RQcm9jZXNzaW5nL2Zvcm0vZmFjdFNwZWNpZmljL0Zvcm1TdWJTY2hlbWFfMTAxMzFGb3JtLmpzb24nLCBKU09OLnN0cmluZ2lmeShmb3JtRGVzY3JpcHRpb24pKTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGxpbmVJdGVtc1NjaGVtYV9Gb3JtU3BlY2lmaWMgPSBmb3JtRGVzY3JpcHRpb24uc2NoZW1hLCBmb3JtTWV0YURhdGFCeUlkID0gZm9ybURlc2NyaXB0aW9uLmJ5SWQsIGZvcm1NZXRhRGF0YUJ5TmFtZSA9IGZvcm1EZXNjcmlwdGlvbi5ieU5hbWU7XHJcblxyXG5teUxvZy5kZWJ1ZyhcIkFkZGl0aW9uYWwgXCIgKyBGb3JtVHlwZSArIFwiIGxpbmUgaXRlbXMgc2NoZW1hIGRlZmluaXRpb24gXCIpO1xyXG5teUxvZy5sb2coXCJBZGRpdGlvbmFsIFwiICsgRm9ybVR5cGUgKyBcIiBsaW5lIGl0ZW1zIHNjaGVtYSBkZWZpbml0aW9uIFwiLCBKU09OLnN0cmluZ2lmeShsaW5lSXRlbXNTY2hlbWFfRm9ybVNwZWNpZmljKSk7XHJcblxyXG5pbXBvcnQgeyBnZXRGYWN0U3BlY2lmaWNTdHVmZiB9IGZyb20gXCIuL2ZhY3RTcGVjaWZpY1BsdWdpblwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFRvRm9ybVNwZWNpZmljSWRlbnRpdHlDcml0ZXJpYShpZGVudGl0eUNyaXRlcmlhOiBhbnksIHJlcTogYW55LCByZXM6IGFueSk6IG9iamVjdCB7XHJcbiAgICBpZGVudGl0eUNyaXRlcmlhW1wiUGF5ZWUgRGV0YWlscy5vVEhfUEFZRUVfRFRMU19TdHJ1Y3R1cmVkR2l2ZW5OYW1lXCJdID0gcmVxLmJvZHlbMTA5MzJdWzE2NTYyXS5fdmFsdWU7XHJcbiAgICBpZGVudGl0eUNyaXRlcmlhW1wiUGF5ZWUgRGV0YWlscy5vVEhfUEFZRUVfRFRMU19TdHJ1Y3R1cmVkRmFtaWx5TmFtZVwiXSA9IHJlcS5ib2R5WzEwOTMyXVsxNjU2MV0uX3ZhbHVlO1xyXG4gICAgaWRlbnRpdHlDcml0ZXJpYVtcIlBheWVlIERldGFpbHMub1RIX1BBWUVFX0RUTFNfU3RydWN0dXJlZEdlb2dyYXBoaWNBZGRyZXNzUG9zdGNvZGVcIl0gPSByZXEuYm9keVsxMDkzMl1bMTY1NzNdLl92YWx1ZTtcclxuICAgIGlkZW50aXR5Q3JpdGVyaWFbXCJQYXllZSBEZXRhaWxzLm9USF9QQVlFRV9EVExTX0luZGl2aWR1YWxCaXJ0aERhdGVcIl0gPSByZXEuYm9keVsxMDkzMl1bMjU0NDVdLl92YWx1ZTtcclxuXHJcbiAgICByZXR1cm4gaWRlbnRpdHlDcml0ZXJpYTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpcm1DYW5UYWtlSWRlbnRpdHlGcm9tUHJpb3JMb2RnbWVudChGb3JtVHlwZU11bmc6IHN0cmluZywgcmVxOiBhbnksIGZvdW5kRm9ybTogYW55LCByZXM6IGFueSk6IGFueSB7XHJcbiAgICAvL2NoZWNrIGl0cyBPSyBmb3IgdGhlIG5ldyBmb3JtIHRvIHRha2UgaXRzIGlkIGZyb20gZm91bmQgZm9ybSAgXHJcbiAgICAvL3RoZSBmb2xsb3dpbmcgY29kZSBpcyBub3QgYWN0dWFsbHkgbmVlZGVkIGFzIGl0IGlzIGFsbCBpbiB0aGUgZmluZCBjcml0ZXJpYVxyXG4gICAgbGV0IG5ld0Zvcm0gPSByZXEuYm9keTtcclxuXHJcbiAgICBpZiAoIW5ld0Zvcm1bXCIxMDkzMlwiXSB8fCAhZm91bmRGb3JtW1wiUGF5ZWUgRGV0YWlsc1wiXSkge1xyXG4gICAgICAgIG5ld0Zvcm0uc3ViamVjdENsaWVudC5NYXRjaGluZ1N0YXR1cyA9IFwiVW5NYXRjaGVkXCI7XHJcbiAgICAgICAgbXlMb2cud2FybihcIigxMDEzMSkgY29uZmlybUNhblRha2VJZGVudGl0eUZyb21QcmlvckxvZGdtZW50IGNvdWxkbid0IGZpbmQgc2VjdGlvbiAxMDkzMiBvciBQYXllZSBEZXRhaWxzXCIpO1xyXG4gICAgICAgIHJldHVybiBuZXdGb3JtO1xyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgaWYgKG5ld0Zvcm1bXCIxMDkzMlwiXVtcIjE2NTYyXCJdLl92YWx1ZSA9PSBmb3VuZEZvcm1bXCJQYXllZSBEZXRhaWxzXCJdW1wib1RIX1BBWUVFX0RUTFNfU3RydWN0dXJlZEdpdmVuTmFtZVwiXSAmJlxyXG4gICAgICAgICAgICBuZXdGb3JtW1wiMTA5MzJcIl1bXCIxNjU2MVwiXS5fdmFsdWUgPT0gZm91bmRGb3JtW1wiUGF5ZWUgRGV0YWlsc1wiXVtcIm9USF9QQVlFRV9EVExTX1N0cnVjdHVyZWRGYW1pbHlOYW1lXCJdICYmXHJcbiAgICAgICAgICAgIG5ld0Zvcm1bXCIxMDkzMlwiXVtcIjE2NTczXCJdLl92YWx1ZSA9PSBmb3VuZEZvcm1bXCJQYXllZSBEZXRhaWxzXCJdW1wib1RIX1BBWUVFX0RUTFNfU3RydWN0dXJlZEdlb2dyYXBoaWNBZGRyZXNzUG9zdGNvZGVcIl0gJiZcclxuICAgICAgICAgICAgbmV3Rm9ybVtcIjEwOTMyXCJdW1wiMjU0NDVcIl0uX3ZhbHVlID09IGZvdW5kRm9ybVtcIlBheWVlIERldGFpbHNcIl1bXCJvVEhfUEFZRUVfRFRMU19JbmRpdmlkdWFsQmlydGhEYXRlXCJdLnRvSVNPU3RyaW5nKCkuc3Vic3RyaW5nKDAsIDEwKSkge1xyXG5cclxuICAgICAgICAgICAgbmV3Rm9ybS5zdWJqZWN0Q2xpZW50LkNsaWVudElkZW50aWZpZXJUeXBlID0gZm91bmRGb3JtLnN1YmplY3RDbGllbnQuQ2xpZW50SWRlbnRpZmllclR5cGU7XHJcbiAgICAgICAgICAgIG5ld0Zvcm0uc3ViamVjdENsaWVudC5DbGllbnRJZGVudGlmaWVyVmFsdWUgPSBmb3VuZEZvcm0uc3ViamVjdENsaWVudC5DbGllbnRJZGVudGlmaWVyVmFsdWU7XHJcbiAgICAgICAgICAgIG5ld0Zvcm0uc3ViamVjdENsaWVudC5NYXRjaGluZ1N0YXR1cyA9IGZvdW5kRm9ybS5zdWJqZWN0Q2xpZW50Lk1hdGNoaW5nU3RhdHVzO1xyXG4gICAgICAgICAgICBuZXdGb3JtLkNsaWVudEludGVybmFsSWQgPSBmb3VuZEZvcm0uQ2xpZW50SW50ZXJuYWxJZDtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgbmV3Rm9ybS5zdWJqZWN0Q2xpZW50Lk1hdGNoaW5nU3RhdHVzID0gXCJVbk1hdGNoZWRcIjtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgbXlMb2cuZXJyb3IoJ0Vycm9yIERldGFpbHM6ICcgKyBlcnJvciwgbmV3Rm9ybSk7XHJcbiAgICAgICAgLy9teUxvZy5lcnJvcihKU09OLnN0cmluZ2lmeShuZXdGb3JtKSk7XHJcblxyXG4gICAgICAgIG5ld0Zvcm0uc3ViamVjdENsaWVudC5NYXRjaGluZ1N0YXR1cyA9IFwiVW5NYXRjaGVkXCI7XHJcbiAgICB9XHJcbiAgICBteUxvZy5kZWJ1ZygnKDEwMTMxKSBjb25maXJtQ2FuVGFrZUlkZW50aXR5RnJvbVByaW9yTG9kZ21lbnQgcmVzdWx0ZWQgaW4gTWF0Y2hpbmcgU3RhdHVzIDogJyArIG5ld0Zvcm0uc3ViamVjdENsaWVudC5NYXRjaGluZ1N0YXR1cyk7XHJcblxyXG4gICAgcmV0dXJuIHJlcTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwb3N0UHV0UHJlUmV0dXJuSG9vayhmb3JtVHlwZU11bmc6IHN0cmluZywgcmVxOiBhbnksIHJlczogYW55KSB7XHJcbiAgICBteUxvZy5kZWJ1ZyhcIldpbGwgZG8gZm9ybSBzcGVjaWZpYyBmaWRkbGluZyBoZXJlXCIpO1xyXG4gICAgcmV0dXJuO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVjaWRlV2hhdFRvUHV0SW5QcmVmaWxsKGZvcm1UeXBlTXVuZzogc3RyaW5nLCBtZWFuaW5nZnVsTmFtZUZvcm06IGFueSk6IFByb21pc2U8eyBwcmVmaWxsTG9va3VwOiBPYmplY3QsIHByZWZpbGxJbnNlcnQ6IE9iamVjdCwgcHJlZmlsbFVwZGF0ZTogT2JqZWN0IH1bXT4ge1xyXG4gICAgbXlMb2cuZGVidWcoXCJXaWxsIGRvIGZvcm0gc3BlY2lmaWMgcmVwbGlhdGlvbiBoZXJlXCIpO1xyXG5cclxuICAgIGNvbnN0IExvb2t1cCA9IHtcclxuICAgICAgICAnRm9ybVR5cGUnOiBcInByZWZpbGxJSVRSXCIsXHJcbiAgICAgICAgXCJzdWJqZWN0Q2xpZW50LkNsaWVudElkZW50aWZpZXJUeXBlXCI6IG1lYW5pbmdmdWxOYW1lRm9ybS5zdWJqZWN0Q2xpZW50LkNsaWVudElkZW50aWZpZXJUeXBlLFxyXG4gICAgICAgIFwic3ViamVjdENsaWVudC5DbGllbnRJZGVudGlmaWVyVmFsdWVcIjogbWVhbmluZ2Z1bE5hbWVGb3JtLnN1YmplY3RDbGllbnQuQ2xpZW50SWRlbnRpZmllclZhbHVlLFxyXG4gICAgICAgICdmYWN0cyc6IHtcclxuICAgICAgICAgICAgJGVsZW1NYXRjaDogeyAvL2ZpbmQgYSBmYWN0cyBlbGVtZW50IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0eSB2YWx1ZXNcclxuICAgICAgICAgICAgICAgICdQYXllZSBEZXRhaWxzLm9USF9QQVlFRV9EVExTX0N1cnJlbnRQYXllclBheWVlUmVsYXRpb25zaGlwUGF5ZWVQYXlyb2xsSWRlbnRpZmllcic6IG1lYW5pbmdmdWxOYW1lRm9ybVtcIlBheWVlIERldGFpbHNcIl0ub1RIX1BBWUVFX0RUTFNfQ3VycmVudFBheWVyUGF5ZWVSZWxhdGlvbnNoaXBQYXllZVBheXJvbGxJZGVudGlmaWVyLFxyXG4gICAgICAgICAgICAgICAgJ1BheWVyIERldGFpbHMub1RIX1BBWUVSX0RUTFNfQ2xpZW50RXh0ZXJuYWxJZGVudGlmaWVyVHlwZUNvZGUnOiBtZWFuaW5nZnVsTmFtZUZvcm1bXCJQYXllciBEZXRhaWxzXCJdLm9USF9QQVlFUl9EVExTX0NsaWVudEV4dGVybmFsSWRlbnRpZmllclR5cGVDb2RlLFxyXG4gICAgICAgICAgICAgICAgJ1BheWVyIERldGFpbHMub1RIX1BBWUVSX0RUTFNfQ2xpZW50RXh0ZXJuYWxJRCc6IG1lYW5pbmdmdWxOYW1lRm9ybVtcIlBheWVyIERldGFpbHNcIl0ub1RIX1BBWUVSX0RUTFNfQ2xpZW50RXh0ZXJuYWxJRCxcclxuICAgICAgICAgICAgICAgICdQYXllciBEZXRhaWxzLm9USF9QQVlFUl9EVExTX0J1c2luZXNzTWFuZ2FtZW50U29mdHdhcmVJZGVudGlmaWVyJzogbWVhbmluZ2Z1bE5hbWVGb3JtW1wiUGF5ZXIgRGV0YWlsc1wiXS5vVEhfUEFZRVJfRFRMU19CdXNpbmVzc01hbmdhbWVudFNvZnR3YXJlSWRlbnRpZmllcixcclxuICAgICAgICAgICAgICAgICdQYXllciBEZXRhaWxzLm9USF9QQVlFUl9EVExTX0VtcGxveWVyQnJhbmNoQ29kZSc6IG1lYW5pbmdmdWxOYW1lRm9ybVtcIlBheWVyIERldGFpbHNcIl0ub1RIX1BBWUVSX0RUTFNfRW1wbG95ZXJCcmFuY2hDb2RlLFxyXG4gICAgICAgICAgICAgICAgJ1BheXJvbGwgRXZlbnQub1RIX1BBWVJPTExfRVZOVF9GaW5hbmNpYWxZZWFyJzogbWVhbmluZ2Z1bE5hbWVGb3JtW1wiUGF5cm9sbCBFdmVudFwiXS5vVEhfUEFZUk9MTF9FVk5UX0ZpbmFuY2lhbFllYXIsXHJcbiAgICAgICAgICAgICAgICAnUGF5cm9sbCBFdmVudC5vVEhfUEFZUk9MTF9FVk5UX1BheXJvbGxFdmVudFBlcmlvZEVuZERhdGUnOiB7IFwiJGx0ZVwiOiBtZWFuaW5nZnVsTmFtZUZvcm1bXCJQYXlyb2xsIEV2ZW50XCJdLm9USF9QQVlST0xMX0VWTlRfUGF5cm9sbEV2ZW50UGVyaW9kRW5kRGF0ZSB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IEluc2VydCA9IHtcclxuICAgICAgICBcIkZvcm1UeXBlXCI6IFwicHJlZmlsbElJVFJcIixcclxuICAgICAgICBcInN1YmplY3RDbGllbnQuQ2xpZW50SWRlbnRpZmllclR5cGVcIjogbWVhbmluZ2Z1bE5hbWVGb3JtLnN1YmplY3RDbGllbnQuQ2xpZW50SWRlbnRpZmllclR5cGUsXHJcbiAgICAgICAgXCJzdWJqZWN0Q2xpZW50LkNsaWVudElkZW50aWZpZXJWYWx1ZVwiOiBtZWFuaW5nZnVsTmFtZUZvcm0uc3ViamVjdENsaWVudC5DbGllbnRJZGVudGlmaWVyVmFsdWUsXHJcbiAgICAgICAgXCIkc2V0T25JbnNlcnRcIjoge1xyXG4gICAgICAgICAgICBUcmFuc2FjdGlvbklkOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcclxuICAgICAgICAgICAgRFRfVXBkYXRlOiBuZXcgRGF0ZSgpLnRvTG9jYWxlRGF0ZVN0cmluZygpLFxyXG4gICAgICAgICAgICBUTV9VcGRhdGU6IG5ldyBEYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKClcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiJHB1c2hcIjogeyBcImZhY3RzXCI6IG1lYW5pbmdmdWxOYW1lRm9ybSB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IFVwZGF0ZSA9IHtcclxuICAgICAgICBcIkZvcm1UeXBlXCI6IFwicHJlZmlsbElJVFJcIixcclxuICAgICAgICBcInN1YmplY3RDbGllbnQuQ2xpZW50SWRlbnRpZmllclR5cGVcIjogbWVhbmluZ2Z1bE5hbWVGb3JtLnN1YmplY3RDbGllbnQuQ2xpZW50SWRlbnRpZmllclR5cGUsXHJcbiAgICAgICAgXCJzdWJqZWN0Q2xpZW50LkNsaWVudElkZW50aWZpZXJWYWx1ZVwiOiBtZWFuaW5nZnVsTmFtZUZvcm0uc3ViamVjdENsaWVudC5DbGllbnRJZGVudGlmaWVyVmFsdWUsXHJcbiAgICAgICAgXCIkc2V0XCI6IHtcclxuICAgICAgICAgICAgXCJmYWN0cy4kXCI6IG1lYW5pbmdmdWxOYW1lRm9ybSxcclxuICAgICAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgICBEVF9VcGRhdGU6IG5ldyBEYXRlKCkudG9Mb2NhbGVEYXRlU3RyaW5nKCksXHJcbiAgICAgICAgICAgIFRNX1VwZGF0ZTogbmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIFt7IHByZWZpbGxMb29rdXA6IExvb2t1cCwgcHJlZmlsbEluc2VydDogSW5zZXJ0LCBwcmVmaWxsVXBkYXRlOiBVcGRhdGUgfV07XHJcbn1cclxuXHJcbmltcG9ydCB7IGxpbmVJdGVtc1NjaGVtYV9Gb3JtU3BlY2lmaWMgYXMgYnVsa1NjaGVtYSB9IGZyb20gJy4vVW5pcXVlRm9ybVJ1bGVzX2J1bGtUcmFuc21pc3Npb25Gb3JtJzsgLy9kaXJlY3RseSBjb3VwbGluZyB0byBidWxrVHJhbnNtaXNzaW9uRm9ybVxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnVsa1RyYW5zbWlzc2lvblRyYWNraW5nKGZvcm1UeXBlTXVuZzogc3RyaW5nLCByZXE6IGFueSwgcmVzOiBhbnksIG1lYW5pbmdmdWxOYW1lRm9ybTogYW55KTogUHJvbWlzZTx7IGxvb2t1cEZpbHRlcjogYW55LCB1cHNlcnRCb2R5OiBhbnksIHNjaGVtYTogYW55IH0gfCBudWxsPiB7XHJcbiAgICBpZiAoIW1lYW5pbmdmdWxOYW1lRm9ybS5UcmFuc21pc3Npb25EZXRhaWxzIHx8ICFtZWFuaW5nZnVsTmFtZUZvcm0uVHJhbnNtaXNzaW9uRGV0YWlscy5UcmFuc21pc3Npb25CRVQpIHJldHVybiBudWxsO1xyXG5cclxuICAgIGNvbnN0IExvb2t1cCA9IHtcclxuICAgICAgICBUcmFuc2FjdGlvbklkOiBtZWFuaW5nZnVsTmFtZUZvcm0uVHJhbnNtaXNzaW9uRGV0YWlscy5UcmFuc21pc3Npb25CRVQsXHJcbiAgICAgICAgRm9ybVR5cGU6IFwiYnVsa1RyYW5zbWlzc2lvblwiXHJcbiAgICB9O1xyXG5cclxuICAgIGlmICghbWVhbmluZ2Z1bE5hbWVGb3JtLlRyYW5zbWlzc2lvbkRldGFpbHMuQ2xpZW50SWRlbnRpZmllclR5cGUpIG1lYW5pbmdmdWxOYW1lRm9ybS5UcmFuc21pc3Npb25EZXRhaWxzLkNsaWVudElkZW50aWZpZXJUeXBlID0gXCJBQk5cIjtcclxuICAgIGlmICghbWVhbmluZ2Z1bE5hbWVGb3JtLlRyYW5zbWlzc2lvbkRldGFpbHMuQ2xpZW50SWRlbnRpZmllclZhbHVlKSBteUxvZy53YXJuKFwiVHJhbnNtaXNzaW9uRGV0YWlscy5DbGllbnRJZGVudGlmaWVyVmFsdWUgc2hvdWxkIGJlIHByZXNlbnQgd2hlbiBUcmFuc21pc3Npb25CRVQgaXMgdXNlZFwiKTtcclxuICAgIGlmICghbWVhbmluZ2Z1bE5hbWVGb3JtLlRyYW5zbWlzc2lvbkRldGFpbHMuQ2xpZW50SWRlbnRpZmllclZhbHVlKSBtZWFuaW5nZnVsTmFtZUZvcm0uVHJhbnNtaXNzaW9uRGV0YWlscy5DbGllbnRJZGVudGlmaWVyVmFsdWUgPSAtMTtcclxuICAgICAgICBcclxuICAgIGNvbnN0IHVwc2VydEJvZHkgPSB7XHJcbiAgICAgICAgJHNldE9uSW5zZXJ0OiB7XHJcbiAgICAgICAgICAgIFRyYW5zYWN0aW9uSWQ6IG1lYW5pbmdmdWxOYW1lRm9ybS5UcmFuc21pc3Npb25EZXRhaWxzLlRyYW5zbWlzc2lvbkJFVCxcclxuICAgICAgICAgICAgXCJzdWJqZWN0Q2xpZW50LkNsaWVudElkZW50aWZpZXJUeXBlXCI6IG1lYW5pbmdmdWxOYW1lRm9ybS5UcmFuc21pc3Npb25EZXRhaWxzLkNsaWVudElkZW50aWZpZXJUeXBlLFxyXG4gICAgICAgICAgICBcInN1YmplY3RDbGllbnQuQ2xpZW50SWRlbnRpZmllclZhbHVlXCI6IG1lYW5pbmdmdWxOYW1lRm9ybS5UcmFuc21pc3Npb25EZXRhaWxzLkNsaWVudElkZW50aWZpZXJWYWx1ZSxcclxuICAgICAgICAgICAgLy9nZWUsIGxvb2tzIGxpa2UgSSd2ZSBkZXZlbG9wZWQgYSBiaXQgb2YgYSBzdHV0dGVyIGhlcmUhISAgVGhlIHJlYXNvbiBJJ20gZG9pbmcgaXQgaXMgc28gdGhlIGluZm8gb24gdGhlIGNvbnRyb2wgcmVjb3JkIGxvb2tzIGxpa2UgdGhlIGluZm8gaW4gdGhlIHNlcGFyYXRlIGZhY3RzXHJcbiAgICAgICAgICAgIFwiVHJhbnNtaXNzaW9uRGV0YWlscy5UcmFuc21pc3Npb25CRVRcIjogbWVhbmluZ2Z1bE5hbWVGb3JtLlRyYW5zbWlzc2lvbkRldGFpbHMuVHJhbnNtaXNzaW9uQkVULFxyXG4gICAgICAgICAgICBcIlRyYW5zbWlzc2lvbkRldGFpbHMuQ2xpZW50SWRlbnRpZmllclR5cGVcIjogbWVhbmluZ2Z1bE5hbWVGb3JtLlRyYW5zbWlzc2lvbkRldGFpbHMuQ2xpZW50SWRlbnRpZmllclR5cGUsXHJcbiAgICAgICAgICAgIFwiVHJhbnNtaXNzaW9uRGV0YWlscy5DbGllbnRJZGVudGlmaWVyVmFsdWVcIjogbWVhbmluZ2Z1bE5hbWVGb3JtLlRyYW5zbWlzc2lvbkRldGFpbHMuQ2xpZW50SWRlbnRpZmllclZhbHVlLFxyXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKClcclxuICAgICAgICB9LFxyXG4gICAgICAgICRzZXQ6IHtcclxuICAgICAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgICBEVF9VcGRhdGU6IG5ldyBEYXRlKCkudG9Mb2NhbGVEYXRlU3RyaW5nKCksXHJcbiAgICAgICAgICAgIFRNX1VwZGF0ZTogbmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJGluYzoge1xyXG4gICAgICAgICAgICBcIlRyYW5zbWlzc2lvbkRldGFpbHMuUmVjb3JkQ291bnRcIjogMVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHsgbG9va3VwRmlsdGVyOiBMb29rdXAsIHVwc2VydEJvZHk6IHVwc2VydEJvZHksIHNjaGVtYTogYnVsa1NjaGVtYSB9O1xyXG59XHJcblxyXG4vL0kndmUgb25seSBkb25lIGEgMS8yIGFzc2VkIGpvYiBvZiBkb2luZyB0aGlzIG1hcHBpbmcuICBHb29kIGVub3VnaCB0byBjaGVjayB0aGUgY29kZSB3b3Jrcy4gIFxyXG4vL1RvZG86IE5lZWQgdG8gdG8gbWFrZSB0aGlzIG1hcHBpbmcgY29ycmVjdC5cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybUZyb21TQlIoZjogYW55KSB7XHJcbiAgICBpZiAoIWYuUEFZRVZOVEVNUCkgcmV0dXJuIFwiRmFpbGVkIHRvIHRyYW5zZm9ybTogTm90IGEgcGF5cm9sbCBldmVudFwiO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgbGV0IHNickZvcm0gPSBmLlBBWUVWTlRFTVA7XHJcbiAgICAgICAgbGV0IG5ld0Zvcm06IGFueSA9IHt9O1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzFdID0ge307XHJcbiAgICAgICAgbmV3Rm9ybS5UcmFuc21pc3Npb24gPSB7fTtcclxuICAgICAgICBuZXdGb3JtLkRUX1VwZGF0ZSA9IHNickZvcm0uVHJhbnNtaXNzaW9uWzBdLlRyYW5zbWlzc2lvbkRbMF07XHJcbiAgICAgICAgbmV3Rm9ybS5UTV9VcGRhdGUgPSBzYnJGb3JtLlRyYW5zbWlzc2lvblswXS5UcmFuc21pc3Npb25UWzBdO1xyXG4gICAgICAgIG5ld0Zvcm0udXBkYXRlZEF0ID0gbmV3IERhdGUobmV3Rm9ybS5EVF9VcGRhdGUgKyBcIjpcIiArIG5ld0Zvcm0uVE1fVXBkYXRlKTtcclxuXHJcbiAgICAgICAgbmV3Rm9ybS5UcmFuc21pc3Npb24uQmV0TnVtYmVyID0gc2JyRm9ybS5UcmFuc21pc3Npb25bMF0uQnVzaW5lc3NFdmVudFRyYWNraW5nTlswXTtcclxuICAgICAgICBuZXdGb3JtLlRyYW5zbWlzc2lvbi5SZWNvcmROdW1iZXIgPSBzYnJGb3JtLlRyYW5zbWlzc2lvblswXS5UcmFuc21pc3Npb25SZWNvcmROWzBdO1xyXG4gICAgICAgIG5ld0Zvcm0uVHJhbnNtaXNzaW9uLkJNU0lkID0gc2JyRm9ybS5UcmFuc21pc3Npb25bMF0uU29mdHdhcmVJbmZvcm1hdGlvblswXS5CdXNpbmVzc01hbmFnZW1lbnRTeXN0ZW1JZFswXTtcclxuXHJcbiAgICAgICAgbmV3Rm9ybS5QYXllciA9IHt9O1xyXG4gICAgICAgIG5ld0Zvcm0uUGF5ZXIuQ2xpZW50RXh0ZXJuYWxJZGVudGlmZXJUeXBlID0gc2JyRm9ybS5QYXllclswXS5DbGllbnRFeHRlcm5hbElkZW50aWZlclR5cGVbMF07XHJcbiAgICAgICAgbmV3Rm9ybS5QYXllci5DbGllbnRFeHRlcm5hbElkZW50aWZlclZhbHVlID0gc2JyRm9ybS5QYXllclswXS5DbGllbnRFeHRlcm5hbElkZW50aWZlclZhbHVlWzBdO1xyXG4gICAgICAgIG5ld0Zvcm0uUGF5ZXIuQ2xpZW50SW50ZXJuYWxJZGVudGlmaWVyID0gc2JyRm9ybS5QYXllclswXS5DbGllbnRJbnRlcm5hbElkZW50aWZpZXJbMF07XHJcblxyXG4gICAgICAgIG5ld0Zvcm0uUGF5ZXIuT3JnYW5pc2F0aW9uYWxEZXRhaWxzID0ge307XHJcbiAgICAgICAgbmV3Rm9ybS5QYXllci5PcmdhbmlzYXRpb25hbERldGFpbHMuT3JnYW5pc2F0aW9uTmFtZVQgPSBzYnJGb3JtLlBheWVyWzBdLk9yZ2FuaXNhdGlvbmFsRGV0YWlsc1swXS5PcmdhbmlzYXRpb25OYW1lVFswXTtcclxuICAgICAgICBuZXdGb3JtLlBheWVyLk9yZ2FuaXNhdGlvbmFsRGV0YWlscy5PcmdhbmlzYXRpb2FsQnJhbmNoQyA9IHNickZvcm0uUGF5ZXJbMF0uT3JnYW5pc2F0aW9uYWxEZXRhaWxzWzBdLk9yZ2FuaXNhdGlvYWxCcmFuY2hDWzBdO1xyXG5cclxuICAgICAgICBuZXdGb3JtWzEwOTMxXVsxNjU1Nl0gPSBzYnJGb3JtLlBheWVyWzBdLkNsaWVudEV4dGVybmFsSWRlbnRpZmVyVmFsdWVbMF0vL1wib1RIX1BBWUVSX0RUTFNfQ2xpZW50RXh0ZXJuYWxJRFwiXHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzMV1bMTQ5MzBdID0gc2JyRm9ybS5QYXllclswXS5DbGllbnRFeHRlcm5hbElkZW50aWZlclR5cGVbMF0gLy9vVEhfUEFZRVJfRFRMU19DbGllbnRFeHRlcm5hbElkZW50aWZpZXJUeXBlQ29kZVwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzFdWzE2NTU3XSA9IHNickZvcm0uUGF5ZXJbMF0uT3JnYW5pc2F0aW9uYWxEZXRhaWxzWzBdLk9yZ2FuaXNhdGlvbk5hbWVUWzBdOyAvL29USF9QQVlFUl9EVExTX1Vuc3RydWN0dXJlZEZ1bGxOYW1lXCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzMV1bMjM5MzBdID0gXCJcIiAvL29USF9QQVlFUl9EVExTX0Rlcml2ZWRDbGllbnRJZGVudGlmaWVyQXVzdHJhbGlhbkJ1c2luZXNzTnVtYmVyXCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzMV1bMjM5NTFdID0gXCJcIiAvL29USF9QQVlFUl9EVExTX0Rlcml2ZWRVbnN0cnVjdHVyZWRGdWxsTmFtZVwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzFdWzE1NDMxXSA9IHNickZvcm0uVHJhbnNtaXNzaW9uWzBdLlNvZnR3YXJlSW5mb3JtYXRpb25bMF0uQnVzaW5lc3NNYW5hZ2VtZW50U3lzdGVtSWRbMF0gLy9vVEhfUEFZRVJfRFRMU19CdXNpbmVzc01hbmdhbWVudFNvZnR3YXJlSWRlbnRpZmllclwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzFdWzE4NDQ5XSA9IHNickZvcm0uUGF5ZXJbMF0uT3JnYW5pc2F0aW9uYWxEZXRhaWxzWzBdLk9yZ2FuaXNhdGlvYWxCcmFuY2hDWzBdIC8vb1RIX1BBWUVSX0RUTFNfRW1wbG95ZXJCcmFuY2hDb2RlXCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzMV1bMjA0NzJdID0gXCJcIiAvL29USF9QQVlFUl9EVExTX0Rlcml2ZWRDbGllbnRCcmFuY2hOdW1iZXJcIjtcclxuXHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzMl0gPSB7fVxyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzJdWzE2NTU4XSA9IHNickZvcm0uUGF5ZWVbMF0uSWRlbnRpZmllcnNbMF0uRW1wbG95bWVudFBheXJvbGxOdW1iZXJJZFswXTsgLy9vVEhfUEFZRUVfRFRMU19DdXJyZW50UGF5ZXJQYXllZVJlbGF0aW9uc2hpcFBheWVlUGF5cm9sbElkZW50aWZpZXJcIjtcclxuICAgICAgICBuZXdGb3JtWzEwOTMyXVsyNTQ0M10gPSBzYnJGb3JtLlBheWVlWzBdLkVtcGxveWVyQ29uZGl0aW9uc1swXS5FbXBsb3ltZW50U3RhcnREWzBdOyAvL29USF9QQVlFRV9EVExTX1BheWVyUGF5ZWVSZWxhdGlvbnNoaXBDb21tZW5jZW1lbnREYXRlXCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzMl1bMjUyNDJdID0gc2JyRm9ybS5QYXllZVswXS5FbXBsb3llckNvbmRpdGlvbnNbMF0uRW1wbG95bWVudEVuZERbMF07IC8vb1RIX1BBWUVFX0RUTFNfUGF5ZXJQYXllZVJlbGF0aW9uc2hpcENlc3NhdGlvbkRhdGVcIjtcclxuICAgICAgICBuZXdGb3JtWzEwOTMyXVsxNjU2MF0gPSBzYnJGb3JtLlBheWVlWzBdLklkZW50aWZpZXJzWzBdLlRheEZpbGVOdW1iZXJJZFswXTsgLy9vVEhfUEFZRUVfRFRMU19DbGllbnRJZGVudGlmaWVyVGF4RmlsZU51bWJlclwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzJdWzI1NDQ0XSA9IHNickZvcm0uUGF5ZWVbMF0uSWRlbnRpZmllcnNbMF0uQXVzdHJhbGlhbkJ1c2luZXNzTnVtYmVySWRbMF07IC8vb1RIX1BBWUVFX0RUTFNfQ29udHJhY3RvckNsaWVudElkZW50aWZpZXJBdXN0cmFsaWFuQnVzaW5lc3NOdW1iZXJcIjtcclxuICAgICAgICBuZXdGb3JtWzEwOTMyXVsxNjU2MV0gPSBzYnJGb3JtLlBheWVlWzBdLlBlcnNvbk5hbWVEZXRhaWxzWzBdLkZhbWlseU5hbWVUWzBdOyAvL29USF9QQVlFRV9EVExTX1N0cnVjdHVyZWRGYW1pbHlOYW1lXCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzMl1bMTY1NjJdID0gc2JyRm9ybS5QYXllZVswXS5QZXJzb25OYW1lRGV0YWlsc1swXS5HaXZlbk5hbWVUWzBdOyAvL29USF9QQVlFRV9EVExTX1N0cnVjdHVyZWRHaXZlbk5hbWVcIjtcclxuICAgICAgICBuZXdGb3JtWzEwOTMyXVsxNjU2NV0gPSBzYnJGb3JtLlBheWVlWzBdLlBlcnNvbk5hbWVEZXRhaWxzWzBdLk90aGVyR2l2ZW5OYW1lVFswXTsgLy9vVEhfUEFZRUVfRFRMU19TdHJ1Y3R1cmVkT3RoZXJHaXZlbk5hbWVcIjtcclxuICAgICAgICBuZXdGb3JtWzEwOTMyXVsyNTQ0NV0gPSBzYnJGb3JtLlBheWVlWzBdLlBlcnNvbkRlbW9ncmFwaGljRGV0YWlsc0JpcnRoWzBdLllbMF0gKyBcIi1cIiArXHJcbiAgICAgICAgICAgIChcIjBcIiArIHNickZvcm0uUGF5ZWVbMF0uUGVyc29uRGVtb2dyYXBoaWNEZXRhaWxzQmlydGhbMF0uTVswXSkuc3Vic3RyKC0yLCAyKSArIFwiLVwiICtcclxuICAgICAgICAgICAgKFwiMFwiICsgc2JyRm9ybS5QYXllZVswXS5QZXJzb25EZW1vZ3JhcGhpY0RldGFpbHNCaXJ0aFswXS5EbVswXSkuc3Vic3RyKC0yLCAyKSAvL29USF9QQVlFRV9EVExTX0luZGl2aWR1YWxCaXJ0aERhdGVcIjtcclxuICAgICAgICBuZXdGb3JtWzEwOTMyXVsxNjU2N10gPSBzYnJGb3JtLlBheWVlWzBdLkFkZHJlc3NEZXRhaWxzWzBdLkxpbmUxVFswXTsgLy9vVEhfUEFZRUVfRFRMU19VbnN0cnVjdHVyZWRHZW9ncmFwaGljQWRkcmVzc0xpbmUxXCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzMl1bMTY1NjhdID0gc2JyRm9ybS5QYXllZVswXS5BZGRyZXNzRGV0YWlsc1swXS5MaW5lMlRbMF07IC8vb1RIX1BBWUVFX0RUTFNfVW5zdHJ1Y3R1cmVkR2VvZ3JhcGhpY0FkZHJlc3NMaW5lMlwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzJdWzE2NTcxXSA9IHNickZvcm0uUGF5ZWVbMF0uQWRkcmVzc0RldGFpbHNbMF0uTG9jYWxpdHlOYW1lVFswXTsgLy9vVEhfUEFZRUVfRFRMU19TdHJ1Y3R1cmVkR2VvZ3JhcGhpY0FkZHJlc3NMb2NhbGl0eU5hbWVcIjtcclxuICAgICAgICBuZXdGb3JtWzEwOTMyXVsxNjU3Ml0gPSBzYnJGb3JtLlBheWVlWzBdLkFkZHJlc3NEZXRhaWxzWzBdLlN0YXRlT3JUZXJyaXRvcnlDWzBdOyAvL29USF9QQVlFRV9EVExTX1N0cnVjdHVyZWRHZW9ncmFwaGljQWRkcmVzc1N0YXRlQ29kZVwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzJdWzE2NTczXSA9IHNickZvcm0uUGF5ZWVbMF0uQWRkcmVzc0RldGFpbHNbMF0uUG9zdGNvZGVUWzBdOyAvL29USF9QQVlFRV9EVExTX1N0cnVjdHVyZWRHZW9ncmFwaGljQWRkcmVzc1Bvc3Rjb2RlXCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzMl1bMTY1NzRdID0gc2JyRm9ybS5QYXllZVswXS5BZGRyZXNzRGV0YWlsc1swXS5Db3VudHJ5Q1swXTsgLy9vVEhfUEFZRUVfRFRMU19Db3VudHJ5Q29kZVwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzJdWzI1NDQ2XSA9IHNickZvcm0uUGF5ZWVbMF0uRWxlY3Ryb25pY0NvbnRhY3RbMF0uRWxlY3Ryb25pY01haWxBZGRyZXNzVFswXTsgLy9vVEhfUEFZRUVfRFRMU19QYXllZUludGVybmV0RW1haWxBZGRyZXNzXCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzMl1bMjU0NDddID0gc2JyRm9ybS5QYXllZVswXS5FbGVjdHJvbmljQ29udGFjdFswXS5UZWxlcGhvbmVNaW5pbWFsTlswXTsgLy9vVEhfUEFZRUVfRFRMU19QYXllZVRlbGVwaG9uZU51bWJlclwiO1xyXG5cclxuICAgICAgICBuZXdGb3JtWzEwOTMzXSA9IHt9O1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzNdWzE2NTgwXSA9IHNickZvcm0uUGF5ZWVbMF0uUGF5cm9sbFBlcmlvZFswXS5TdGFydERbMF07IC8vb1RIX1BBWVJPTExfRVZOVF9QYXlyb2xsRXZlbnRQZXJpb2RTdGFydERhdGVcIjtcclxuICAgICAgICBuZXdGb3JtWzEwOTMzXVsxNjU4Ml0gPSBzYnJGb3JtLlBheWVlWzBdLlBheXJvbGxQZXJpb2RbMF0uRW5kRFswXTsgLy9vVEhfUEFZUk9MTF9FVk5UX1BheXJvbGxFdmVudFBlcmlvZEVuZERhdGVcIjtcclxuICAgICAgICBuZXdGb3JtWzEwOTMzXVsxODQ1MF0gPSBcIlwiIC8vb1RIX1BBWVJPTExfRVZOVF9GaW5hbmNpYWxZZWFyXCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzM11bMTY1ODVdID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF0gLy9vVEhfUEFZUk9MTF9FVk5UX0xvZGdtZW50RGF0ZVwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzNdWzE2NzEwXSA9IFwiXCIgLy9vVEhfUEFZUk9MTF9FVk5UX1BheW1lbnREYXRlXCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzM11bMjU0NTFdID0gXCJcIiAvL29USF9QQVlST0xMX0VWTlRfUGF5cm9sbE1lc3NhZ2VUaW1lc3RhbXBTb3VyY2VEYXRldGltZVwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzNdWzI1NDUyXSA9IHNickZvcm0uUGF5ZWVbMF0uUGF5cm9sbFBlcmlvZFswXS5SZW11bmVyYXRpb25QYXlyb2xsRXZlbnRGaW5hbElbMF07IC8vb1RIX1BBWVJPTExfRVZOVF9QYXlyb2xsRXZlbnRGaW5hbEluZGljYXRvclwiO1xyXG5cclxuICAgICAgICBuZXdGb3JtWzEwOTM2XSA9IHt9O1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzZdWzE1NDcwXSA9IHNickZvcm0uUGF5ZWVbMF0uUGF5cm9sbFBlcmlvZFswXS5SZW11bmVyYXRpb25Db2xsZWN0aW9uWzBdLlJlbXVuZXJhdGlvblswXS5JbmRpdmlkdWFsTm9uQnVzaW5lc3NFeGVtcHRGb3JlaWduRW1wbG95bWVudEluY29tZUFbMF0gLy9vVEhfV0FHRV9BTkRfVEFYX0lURU1fUGF5ZWVGb3JlaWduSW5jb21lRXhlbXB0QW1vdW50XCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzNl1bMTU0ODhdID0gc2JyRm9ybS5QYXllZVswXS5QYXlyb2xsUGVyaW9kWzBdLlJlbXVuZXJhdGlvbkNvbGxlY3Rpb25bMF0uUmVtdW5lcmF0aW9uWzBdLkluZGl2aWR1YWxOb25CdXNpbmVzc0NvbW11bml0eURldmVsb3BtZW50RW1wbG95bWVudFByb2plY3RBWzBdOyAvL29USF9XQUdFX0FORF9UQVhfSVRFTV9QYXllZUluY29tZUNvbW11bml0eURldmVsb3BtZW50RW1wbG95bWVudFByb2plY3RBbW91bnRcIjtcclxuXHJcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuICAgICAgICBzYnJGb3JtLlBheWVlWzBdLlBheXJvbGxQZXJpb2RbMF0uUmVtdW5lcmF0aW9uQ29sbGVjdGlvbi5tYXAoKHI6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY291bnQgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbmV3Rm9ybVsxMDkzNl1bMTU0NTNdID0gW11cclxuICAgICAgICAgICAgICAgIG5ld0Zvcm1bMTA5MzZdWzI1NDUzXSA9IFtdXHJcbiAgICAgICAgICAgICAgICBuZXdGb3JtWzEwOTM2XVsyNTQ1NF0gPSBbXVxyXG4gICAgICAgICAgICAgICAgbmV3Rm9ybVsxMDkzNl1bMTU0ODldID0gW11cclxuICAgICAgICAgICAgICAgIG5ld0Zvcm1bMTA5MzZdWzE1NDk2XSA9IFtdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbmV3Rm9ybVsxMDkzNl1bMTU0NTNdW2NvdW50XSA9IHIuUmVtdW5lcmF0aW9uWzBdLkVtcGxveW1lbnRUZXJtaW5hdGlvblBheW1lbnRDb2xsZWN0aW9uWzBdLkVtcGxveW1lbnRUZXJtaW5hdGlvblBheW1lbnRbMF0uSW5jb21lVGF4UGF5QXNZb3VHb1dpdGhob2xkaW5nVHlwZUNbMF07IC8vb1RIX1dBR0VfQU5EX1RBWF9JVEVNX1NlY3Rpb25Hcm91cDVcIiwgXCJvVEhfV0FHRV9BTkRfVEFYX0lURU1fRW1wbG95bWVudFRlcm1pbmF0aW9uUGF5bWVudFR5cGVDb2RlXCI7XHJcbiAgICAgICAgICAgIG5ld0Zvcm1bMTA5MzZdWzI1NDUzXVtjb3VudF0gPSByLlJlbXVuZXJhdGlvblswXS5FbXBsb3ltZW50VGVybWluYXRpb25QYXltZW50Q29sbGVjdGlvblswXS5FbXBsb3ltZW50VGVybWluYXRpb25QYXltZW50WzBdLkluY29tZURbMF07IC8vb1RIX1dBR0VfQU5EX1RBWF9JVEVNX1NlY3Rpb25Hcm91cDVcIiwgXCJvVEhfV0FHRV9BTkRfVEFYX0lURU1fRW1wbG95bWVudFRlcm1pbmF0aW9uUGF5bWVudFBheW1lbnREYXRlXCI7XHJcbiAgICAgICAgICAgIG5ld0Zvcm1bMTA5MzZdWzI1NDU0XVtjb3VudF0gPSByLlJlbXVuZXJhdGlvblswXS5FbXBsb3ltZW50VGVybWluYXRpb25QYXltZW50Q29sbGVjdGlvblswXS5FbXBsb3ltZW50VGVybWluYXRpb25QYXltZW50WzBdLkluY29tZVBheUFzWW91R29XaXRoaG9sZGluZ0FbMF07IC8vb1RIX1dBR0VfQU5EX1RBWF9JVEVNX1NlY3Rpb25Hcm91cDVcIiwgXCJvVEhfV0FHRV9BTkRfVEFYX0lURU1fRW1wbG95bWVudFRlcm1pbmF0aW9uUGF5bWVudFRheFdpdGhoZWxkVG90YWxBbW91bnRcIjtcclxuICAgICAgICAgICAgbmV3Rm9ybVsxMDkzNl1bMTU0ODldW2NvdW50XSA9IHIuUmVtdW5lcmF0aW9uWzBdLkVtcGxveW1lbnRUZXJtaW5hdGlvblBheW1lbnRDb2xsZWN0aW9uWzBdLkVtcGxveW1lbnRUZXJtaW5hdGlvblBheW1lbnRbMF0uSW5jb21lVGF4RnJlZUFbMF07IC8vb1RIX1dBR0VfQU5EX1RBWF9JVEVNX1NlY3Rpb25Hcm91cDVcIiwgXCJvVEhfV0FHRV9BTkRfVEFYX0lURU1fRW1wbG95bWVudFRlcm1pbmF0aW9uUGF5bWVudFRheEZyZWVBbW91bnRcIjtcclxuICAgICAgICAgICAgbmV3Rm9ybVsxMDkzNl1bMTU0OTZdW2NvdW50XSA9IHIuUmVtdW5lcmF0aW9uWzBdLkVtcGxveW1lbnRUZXJtaW5hdGlvblBheW1lbnRDb2xsZWN0aW9uWzBdLkVtcGxveW1lbnRUZXJtaW5hdGlvblBheW1lbnRbMF0uSW5jb21lVGF4YWJsZUFbMF07IC8vb1RIX1dBR0VfQU5EX1RBWF9JVEVNX1NlY3Rpb25Hcm91cDVcIiwgXCJvVEhfV0FHRV9BTkRfVEFYX0lURU1fRW1wbG95bWVudFRlcm1pbmF0aW9uUGF5bWVudFRheGFibGVDb21wb25lbnRBbW91bnRcIjtcclxuICAgICAgICAgICAgY291bnQrK1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzZdWzE2Nzg3XSA9IHNickZvcm0uUGF5ZWVbMF0uUGF5cm9sbFBlcmlvZFswXS5SZW11bmVyYXRpb25Db2xsZWN0aW9uWzBdLlJlbXVuZXJhdGlvblswXS5MdW1wU3VtQ29sbGVjdGlvblswXS5MdW1wU3VtWzBdLlR5cGVDWzBdOyAvL29USF9XQUdFX0FORF9UQVhfSVRFTV9QYXllZUFubnVhbExvbmdTZXJ2aWNlTGVhdmVVbnVzZWRMdW1wU3VtQUNvZGVcIjtcclxuICAgICAgICBuZXdGb3JtWzEwOTM2XVsxNTQ5OV0gPSBbJ1InLCAnVycsICdUJ10uaW5jbHVkZXMoc2JyRm9ybS5QYXllZVswXS5QYXlyb2xsUGVyaW9kWzBdLlJlbXVuZXJhdGlvbkNvbGxlY3Rpb25bMF0uUmVtdW5lcmF0aW9uWzBdLkx1bXBTdW1Db2xsZWN0aW9uWzBdLkx1bXBTdW1bMF0uVHlwZUNbMF0pID8gc2JyRm9ybS5QYXllZVswXS5QYXlyb2xsUGVyaW9kWzBdLlJlbXVuZXJhdGlvbkNvbGxlY3Rpb25bMF0uUmVtdW5lcmF0aW9uWzBdLkx1bXBTdW1Db2xsZWN0aW9uWzBdLkx1bXBTdW1bMF0uUGF5bWVudHNBWzBdIDogMCAvL29USF9XQUdFX0FORF9UQVhfSVRFTV9QYXllZUFubnVhbExvbmdTZXJ2aWNlTGVhdmVVbnVzZWRMdW1wU3VtQUFtb3VudFwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzZdWzE1NTAxXSA9IHNickZvcm0uUGF5ZWVbMF0uUGF5cm9sbFBlcmlvZFswXS5SZW11bmVyYXRpb25Db2xsZWN0aW9uWzBdLlJlbXVuZXJhdGlvblswXS5MdW1wU3VtQ29sbGVjdGlvblswXS5MdW1wU3VtWzBdLlR5cGVDWzBdID09ICdCJyA/IHNickZvcm0uUGF5ZWVbMF0uUGF5cm9sbFBlcmlvZFswXS5MdW1wU3VtQ29sbGVjdGlvblswXS5MdW1wU3VtWzBdLlBheW1wYWlkZW50c0FbMF0gOiAwIC8vb1RIX1dBR0VfQU5EX1RBWF9JVEVNX1BheWVlQW5udWFsTG9uZ1NlcnZpY2VMZWF2ZVVudXNlZEx1bXBTdW1CQW1vdW50XCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzNl1bMTU1MDhdID0gc2JyRm9ybS5QYXllZVswXS5QYXlyb2xsUGVyaW9kWzBdLlJlbXVuZXJhdGlvbkNvbGxlY3Rpb25bMF0uUmVtdW5lcmF0aW9uWzBdLkx1bXBTdW1Db2xsZWN0aW9uWzBdLkx1bXBTdW1bMF0uVHlwZUNbMF0gPT0gJ0QnID8gc2JyRm9ybS5QYXllZVswXS5QYXlyb2xsUGVyaW9kWzBdLkx1bXBTdW1Db2xsZWN0aW9uWzBdLkx1bXBTdW1bMF0uUGF5bWVudHNBWzBdIDogMCAvL29USF9XQUdFX0FORF9UQVhfSVRFTV9QYXllZUFubnVhbExvbmdTZXJ2aWNlTGVhdmVVbnVzZWRMdW1wU3VtREFtb3VudFwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzZdWzE1NTEwXSA9IHNickZvcm0uUGF5ZWVbMF0uUGF5cm9sbFBlcmlvZFswXS5SZW11bmVyYXRpb25Db2xsZWN0aW9uWzBdLlJlbXVuZXJhdGlvblswXS5MdW1wU3VtQ29sbGVjdGlvblswXS5MdW1wU3VtWzBdLlR5cGVDWzBdID09ICdFJyA/IHNickZvcm0uUGF5ZWVbMF0uUGF5cm9sbFBlcmlvZFswXS5MdW1wU3VtQ29sbGVjdGlvblswXS5MdW1wU3VtWzBdLlBheW1lbnRzQVswXSA6IDAgLy9vVEhfV0FHRV9BTkRfVEFYX0lURU1fUGF5ZWVBbm51YWxMb25nU2VydmljZUxlYXZlVW51c2VkTHVtcFN1bUVBbW91bnRcIjtcclxuICAgICAgICBuZXdGb3JtWzEwOTM2XVsxNTQ1NF0gPSBzYnJGb3JtLlBheWVlWzBdLlBheXJvbGxQZXJpb2RbMF0uUmVtdW5lcmF0aW9uQ29sbGVjdGlvblswXS5SZW11bmVyYXRpb25bMF0uR3Jvc3NBWzBdIC8vb1RIX1dBR0VfQU5EX1RBWF9JVEVNX1BheWVlWWVhclRvRGF0ZUluY29tZUdyb3NzQW1vdW50XCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzNl1bMjU0NTVdID0gc2JyRm9ybS5QYXllZVswXS5QYXlyb2xsUGVyaW9kWzBdLlJlbXVuZXJhdGlvbkNvbGxlY3Rpb25bMF0uUmVtdW5lcmF0aW9uWzBdLkluZGl2aWR1YWxOb25CdXNpbmVzc0V4ZW1wdEZvcmVpZ25FbXBsb3ltZW50SW5jb21lQVswXTsgLy9vVEhfV0FHRV9BTkRfVEFYX0lURU1fUGF5ZWVGb3JlaWduSW5jb21lRW1wbG95bWVudEdyb3NzQW1vdW50XCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzNl1bMjU0NTZdID0gMCAvL29USF9XQUdFX0FORF9UQVhfSVRFTV9QYXllZUZvcmVpZ25JbmNvbWVFbXBsb3ltZW50Sm9pbnRQZXRyb2xldW1EZXZlbG9wbWVudEFyZWFHcm9zc0Ftb3VudFwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzZdWzE1NDU2XSA9IDAvL29USF9XQUdFX0FORF9UQVhfSVRFTV9QYXllZUluY29tZUxhYm91ckhpcmVBcnJhbmdlbWVudEdyb3NzQW1vdW50XCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzNl1bMTU1MThdID0gMCAvL29USF9XQUdFX0FORF9UQVhfSVRFTV9QYXllZUluY29tZVZvbHVudGFyeUFncmVlbWVudEdyb3NzQW1vdW50XCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzNl1bMjU0NTddID0gMCAvL29USF9XQUdFX0FORF9UQVhfSVRFTV9QYXllZUluY29tZU90aGVyQW1vdW50XCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzNl1bMjc0NTRdID0gMCAvL29USF9XQUdFX0FORF9UQVhfSVRFTV9QYXllZUluY29tZVdvcmtpbmdIb2xpZGF5TWFrZXJZZWFyVG9EYXRlR3Jvc3NBbW91bnRcIjtcclxuICAgICAgICBuZXdGb3JtWzEwOTM2XVsyNTQ1OF0gPSBzYnJGb3JtLlBheWVlWzBdLlBheXJvbGxQZXJpb2RbMF0uSW5jb21lRnJpbmdlQmVuZWZpdHNSZXBvcnRhYmxlQ29sbGVjdGlvblswXS5JbmNvbWVGcmluZ2VCZW5lZml0c1JlcG9ydGFibGVbMF0uRnJpbmdlQmVuZWZpdHNSZXBvcnRhYmxlRXhlbXB0aW9uQ1swXSA9PSAnVCcgPyBzYnJGb3JtLlBheWVlWzBdLlBheXJvbGxQZXJpb2RbMF0uSW5jb21lRnJpbmdlQmVuZWZpdHNSZXBvcnRhYmxlQ29sbGVjdGlvblswXS5JbmNvbWVGcmluZ2VCZW5lZml0c1JlcG9ydGFibGVbMF0uQVswXSA6IDAgLy9vVEhfV0FHRV9BTkRfVEFYX0lURU1fUGF5ZWVGcmluZ2VCZW5lZml0c1JlcG9ydGFibGVUYXhhYmxlQW1vdW50XCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzNl1bMjU0NTldID0gc2JyRm9ybS5QYXllZVswXS5QYXlyb2xsUGVyaW9kWzBdLkluY29tZUZyaW5nZUJlbmVmaXRzUmVwb3J0YWJsZUNvbGxlY3Rpb25bMF0uSW5jb21lRnJpbmdlQmVuZWZpdHNSZXBvcnRhYmxlWzBdLkZyaW5nZUJlbmVmaXRzUmVwb3J0YWJsZUV4ZW1wdGlvbkNbMF0gIT09ICdUJyA/IHNickZvcm0uUGF5ZWVbMF0uUGF5cm9sbFBlcmlvZFswXS5JbmNvbWVGcmluZ2VCZW5lZml0c1JlcG9ydGFibGVDb2xsZWN0aW9uWzBdLkluY29tZUZyaW5nZUJlbmVmaXRzUmVwb3J0YWJsZVswXS5BWzBdIDogMCAvL29USF9XQUdFX0FORF9UQVhfSVRFTV9QYXllZUZyaW5nZUJlbmVmaXRzUmVwb3J0YWJsZUV4ZW1wdEFtb3VudFwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzZdWzE2ODIwXSA9IHNickZvcm0uUGF5ZWVbMF0uUGF5cm9sbFBlcmlvZFswXS5SZW11bmVyYXRpb25Db2xsZWN0aW9uWzBdLlJlbXVuZXJhdGlvblswXS5JbmNvbWVUYXhQYXlBc1lvdUdvV2l0aGhvbGRpbmdUYXhXaXRoaGVsZEFbMF07IC8vb1RIX1dBR0VfQU5EX1RBWF9JVEVNX1BheUFzWW91R29XaXRoaG9sZGluZ1llYXJUb0RhdGVXaXRoaGVsZEFtb3VudFwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzZdWzI1NDYwXSA9IHNickZvcm0uUGF5ZWVbMF0uUGF5cm9sbFBlcmlvZFswXS5SZW11bmVyYXRpb25Db2xsZWN0aW9uWzBdLlJlbXVuZXJhdGlvblswXS5JbmNvbWVUYXhGb3JlaWduV2l0aGhvbGRpbmdBWzBdOyAvL29USF9XQUdFX0FORF9UQVhfSVRFTV9QYXlBc1lvdUdvV2l0aGhvbGRpbmdGb3JlaWduRW1wbG95bWVudEluY29tZVRvdGFsQW1vdW50XCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzNl1bMjU0NjFdID0gMCAvL29USF9XQUdFX0FORF9UQVhfSVRFTV9QYXlBc1lvdUdvV2l0aGhvbGRpbmdGb3JlaWduRW1wbG95bWVudEluY29tZUpvaW50UGV0cm9sZXVtRGV2ZWxvcG1lbnRBcmVhVG90YWxBbW91bnRcIjtcclxuICAgICAgICBuZXdGb3JtWzEwOTM2XVsyNTQ2Ml0gPSAwIC8vb1RIX1dBR0VfQU5EX1RBWF9JVEVNX1BheUFzWW91R29XaXRoaG9sZGluZ0xhYm91ckhpcmVUb3RhbEFtb3VudFwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzZdWzI1NDYzXSA9IDAgLy9vVEhfV0FHRV9BTkRfVEFYX0lURU1fUGF5QXNZb3VHb1dpdGhob2xkaW5nVm9sdW50YXJ5QWdyZWVtZW50VG90YWxBbW91bnRcIjtcclxuICAgICAgICBuZXdGb3JtWzEwOTM2XVsyNTQ2NF0gPSAwLy9vVEhfV0FHRV9BTkRfVEFYX0lURU1fUGF5QXNZb3VHb1dpdGhob2xkaW5nT3RoZXJTcGVjaWZpZWRUb3RhbEFtb3VudFwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzZdWzI3NDU1XSA9IDAgLy9vVEhfV0FHRV9BTkRfVEFYX0lURU1fUGF5QXNZb3VHb1dpdGhob2xkaW5nV29ya2luZ0hvbGlkYXlNYWtlclllYXJUb0RhdGVUb3RhbEFtb3VudFwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzZdWzE1NTIzXSA9IHNickZvcm0uUGF5ZWVbMF0uUGF5cm9sbFBlcmlvZFswXS5SZW11bmVyYXRpb25Db2xsZWN0aW9uWzBdLlJlbXVuZXJhdGlvblswXS5JbmNvbWVUYXhGb3JlaWduV2l0aGhvbGRpbmdBWzBdOyAvL29USF9XQUdFX0FORF9UQVhfSVRFTV9ZZWFyVG9EYXRlRm9yZWlnbkluY29tZUVtcGxveW1lbnRUYXhDcmVkaXRXaXRoaGVsZEFtb3VudFwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzZdWzI3NDU2XSA9IDAgLy9vVEhfV0FHRV9BTkRfVEFYX0lURU1fSm9pbnRQZXRyb2xldW1EZXZlbG9wbWVudEFyZWFGb3JlaWduSW5jb21lRW1wbG95bWVudFRheFBhaWRZZWFyVG9EYXRlQW1vdW50XCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMDkzNl1bMjY3MTZdID0gc2JyRm9ybS5QYXllZVswXS5QYXlyb2xsUGVyaW9kWzBdLlJlbXVuZXJhdGlvbkNvbGxlY3Rpb25bMF0uUmVtdW5lcmF0aW9uWzBdLkdyb3NzQVswXTsgLy9vVEhfV0FHRV9BTkRfVEFYX0lURU1fUGF5bWVudFN1bW1hcnlUb3RhbEdyb3NzUGF5bWVudEFtb3VudFwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzZdWzI2NzE3XSA9IDAgLy9vVEhfV0FHRV9BTkRfVEFYX0lURU1fVGF4V2l0aGhlbGRUb3RhbEFtb3VudFwiO1xyXG5cclxuICAgICAgICBuZXdGb3JtWzEwOTM5XSA9IHt9O1xyXG4gICAgICAgIGNvdW50ID0gMDtcclxuICAgICAgICBzYnJGb3JtLlBheWVlWzBdLlBheXJvbGxQZXJpb2RbMF0uRGVkdWN0aW9uQ29sbGVjdGlvbi5tYXAoKGQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY291bnQgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbmV3Rm9ybVsxMDkzOV1bMTY4MjVdID0gW11cclxuICAgICAgICAgICAgICAgIG5ld0Zvcm1bMTA5MzldWzE2ODMzXSA9IFtdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbmV3Rm9ybVsxMDkzOV1bMTY4MjVdW2NvdW50XSA9IGQuRGVkdWN0aW9uWzBdLlJlbXVuZXJhdGlvblR5cGVDWzBdOyAvL29USF9ERURVQ1RJT05fSVRFTV9TZWN0aW9uR3JvdXAzXCIsIFwib1RIX0RFRFVDVElPTl9JVEVNX0luZGl2aWR1YWxEZWR1Y3Rpb25UeXBlQ29kZVwiO1xyXG4gICAgICAgICAgICBuZXdGb3JtWzEwOTM5XVsxNjgzM11bY291bnRdID0gZC5EZWR1Y3Rpb25bMF0uUmVtdW5lcmF0aW9uQVswXTsgLy9vVEhfREVEVUNUSU9OX0lURU1fU2VjdGlvbkdyb3VwM1wiLCBcIm9USF9ERURVQ1RJT05fSVRFTV9JbmRpdmlkdWFsRGVkdWN0aW9uWWVhclRvRGF0ZUFtb3VudFwiO1xyXG4gICAgICAgICAgICBjb3VudCsrXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgY291bnQgPSAwO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5MzldID0ge307XHJcbiAgICAgICAgc2JyRm9ybS5QYXllZVswXS5QYXlyb2xsUGVyaW9kWzBdLlJlbXVuZXJhdGlvbkNvbGxlY3Rpb25bMF0uUmVtdW5lcmF0aW9uWzBdLkFsbG93YW5jZUNvbGxlY3Rpb24ubWFwKChhOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgaWYgKGNvdW50ID09IDApIHtcclxuICAgICAgICAgICAgICAgIG5ld0Zvcm1bMTA5MzldWzE2ODM1XSA9IFtdXHJcbiAgICAgICAgICAgICAgICBuZXdGb3JtWzEwOTM5XVsxNTUyNF0gPSBbXVxyXG4gICAgICAgICAgICAgICAgbmV3Rm9ybVsxMDkzOV1bMTY4NDFdID0gW11cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBuZXdGb3JtWzEwOTM5XVsxNjgzNV1bY291bnRdID0gYS5BbGxvd2FuY2VbMF0uVHlwZUNbMF07IC8vb1RIX0FMTE9XQU5DRV9JVEVNX1NlY3Rpb25Hcm91cDRcIiwgXCJvVEhfQUxMT1dBTkNFX0lURU1fQWxsb3dhbmNlSW5jb21lVHlwZUNvZGVcIjtcclxuICAgICAgICAgICAgbmV3Rm9ybVsxMDkzOV1bMTU1MjRdW2NvdW50XSA9IGEuQWxsb3dhbmNlWzBdLk90aGVyQWxsb3dhbmNlVHlwZURlWzBdOyAvL29USF9BTExPV0FOQ0VfSVRFTV9TZWN0aW9uR3JvdXA0XCIsIFwib1RIX0FMTE9XQU5DRV9JVEVNX0FsbG93YW5jZUluY29tZVR5cGVPdGhlckRlc2NyaXB0aW9uVGV4dFwiO1xyXG4gICAgICAgICAgICBuZXdGb3JtWzEwOTM5XVsxNjg0MV1bY291bnRdID0gYS5BbGxvd2FuY2VbMF0uRW1wbG95bWVudEFsbG93YW5jZXNBWzBdOyAvL29USF9BTExPV0FOQ0VfSVRFTV9TZWN0aW9uR3JvdXA0XCIsIFwib1RIX0FMTE9XQU5DRV9JVEVNX0FsbG93YW5jZUluY29tZVllYXJUb0RhdGVBbW91bnRcIjtcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBuZXdGb3JtWzEwOTQxXSA9IHt9O1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5NDFdWzI1NDY1XSA9IDAgLy9vVEhfQUxMT1dBTkNFX0lURU1fQWxsb3dhbmNlSW5jb21lVG90YWxBbW91bnRcIjtcclxuXHJcbiAgICAgICAgbmV3Rm9ybVsxMDk0M10gPSB7fTtcclxuICAgICAgICBuZXdGb3JtWzEwOTQzXVsxNTUyNV0gPSBzYnJGb3JtLlBheWVlWzBdLlBheXJvbGxQZXJpb2RbMF0uU3VwZXJhbm51YXRpb25Db250cmlidXRpb25Db2xsZWN0aW9uWzBdLlN1cGVyYW5udWF0aW9uQ29udHJpYnV0aW9uWzBdLkVtcGxveWVyQ29udHJpYnV0aW9uc1llYXJUb0RhdGVBWzBdOyAvL29USF9TVVBFUl9FTlRJVExFTUVOVF9ZZWFyVG9EYXRlU3VwZXJhbm51YXRpb25HdWFyYW50ZWVFbXBsb3llckNvbnRyaWJ1dGlvbkFtb3VudFwiO1xyXG4gICAgICAgIG5ld0Zvcm1bMTA5NDNdWzE1NTIxXSA9IDAgLy9vVEhfU1VQRVJfRU5USVRMRU1FTlRfWWVhclRvRGF0ZVN1cGVyYW5udWF0aW9uR3VhcmFudGVlT3JkaW5hcnlUaW1lRWFybmluZ3NBbW91bnRcIjtcclxuICAgICAgICBuZXdGb3JtWzEwOTQzXVsyNTQ2Nl0gPSAwIC8vb1RIX1NVUEVSX0VOVElUTEVNRU5UX0VtcGxveWVyU3VwZXJhbm51YXRpb25Db250cmlidXRpb25SZXBvcnRhYmxlQW1vdW50XCI7XHJcblxyXG4gICAgICAgIG5ld0Zvcm1bMTEzMDNdID0ge307XHJcbiAgICAgICAgbmV3Rm9ybVsxMTMwM11bMjU0NjddID0gc2JyRm9ybS5QYXllZVswXS5FbXBsb3llckNvbmRpdGlvbnNbMF0uUGF5bWVudEJhc2lzQ1swXTsgLy9vVEhfVEZOX0RFQ0xBUkFUSU9OX1BheWVyUGF5ZWVSZWxhdGlvbnNoaXBQYXltZW50QmFzaXNDb2RlXCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMTMwM11bMjU0NjhdID0gXCJcIiAvL29USF9URk5fREVDTEFSQVRJT05fUGF5ZWVDbGllbnRSZXNpZGVudFN0YXR1c0NvZGVcIjtcclxuICAgICAgICBuZXdGb3JtWzExMzAzXVsyNTQ2OV0gPSBcIlwiIC8vb1RIX1RGTl9ERUNMQVJBVElPTl9QYXllclBheWVlUmVsYXRpb25zaGlwVGF4RnJlZVRocmVzaG9sZENsYWltZWRJbmRpY2F0b3JcIjtcclxuICAgICAgICBuZXdGb3JtWzExMzAzXVsyODEzMF0gPSBcIlwiIC8vb1RIX1RGTl9ERUNMQVJBVElPTl9QYXllclBheWVlUmVsYXRpb25zaGlwU3R1ZHlhbmRUcmFpbmluZ0xvYW5SZXBheW1lbnRDbGFpbWVkSW5kaWNhdG9yXCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMTMwM11bMjU0NzZdID0gXCJcIiAvL29USF9URk5fREVDTEFSQVRJT05fUGF5ZXJQYXllZVJlbGF0aW9uc2hpcFN0dWRlbnRGaW5hbmNpYWxTdXBwbGVtZW50RGVidENsYWltZWRJbmRpY2F0b3JcIjtcclxuICAgICAgICBuZXdGb3JtWzExMzAzXVsyNTQ3OF0gPSBcIlwiIC8vb1RIX1RGTl9ERUNMQVJBVElPTl9QYXllZURlY2xhcmF0aW9uSW5kaWNhdG9yXCI7XHJcbiAgICAgICAgbmV3Rm9ybVsxMTMwM11bMjU0NzldID0gXCJcIiAvL29USF9URk5fREVDTEFSQVRJT05fUGF5ZWVEZWNsYXJhdGlvbkRhdGVcIjtcclxuICAgICAgICBuZXdGb3JtWzExMzAzXVsyODM1Ml0gPSBcIlwiIC8vb1RIX1RGTl9ERUNMQVJBVElPTl9QYXllclBheWVlUmVsYXRpb25zaGlwVGVybWluYXRlZEluZGljYXRvclwiIFxyXG4gICAgICAgIC8vRG9uJ3Qga25vdyB3aGVyZSB0byBtYXA6XHJcbiAgICAgICAgLy8gUGF5ZWUuRW1wbG95ZXJDb25kaXRpb25zLlRheFRyZWF0bWVudENcclxuICAgICAgICAvLyBQYXllZS5FbXBsb3llckNvbmRpdGlvbnMuVGF4T2Zmc2V0Q2xhaW1Ub3RhbEFcclxuICAgICAgICAvLyBQYXllZS5QYXlyb2xsUGVyaW9kLlJlbXVuZXJhdGlvbkNvbGxlY3Rpb24uUmVtdW5lcmF0aW9uLkluY29tZVN0cmVhbVR5cGVDXHJcbiAgICAgICAgLy8gUGF5ZWUuUGF5cm9sbFBlcmlvZC5SZW11bmVyYXRpb25Db2xsZWN0aW9uLlJlbXVuZXJhdGlvbi5BZGRyZXNzRGV0YWlsc0NvdW50cnlDXHJcbiAgICAgICAgLy8gUGF5ZWUuUGF5cm9sbFBlcmlvZC5SZW11bmVyYXRpb25Db2xsZWN0aW9uLlJlbXVuZXJhdGlvbi5PdmVydGltZVBheW1lbnRBXHJcbiAgICAgICAgLy8gUGF5ZWUuUGF5cm9sbFBlcmlvZC5SZW11bmVyYXRpb25Db2xsZWN0aW9uLlJlbXVuZXJhdGlvbi5Hcm9zc0JvbnVzZXNBbmRDb21taXNzaW9uc0FcclxuICAgICAgICAvLyBQYXllZS5QYXlyb2xsUGVyaW9kLlJlbXVuZXJhdGlvbkNvbGxlY3Rpb24uUmVtdW5lcmF0aW9uLkdyb3NzRGlyZWN0b3JzRmVlc0FcclxuICAgICAgICAvLyBQYXllZS5QYXlyb2xsUGVyaW9kLlJlbXVuZXJhdGlvbkNvbGxlY3Rpb24uUmVtdW5lcmF0aW9uLkluZGl2aWR1YWxOb25CdXNpbmVzc0NvbW11bml0eURldmVsb3BtZW50RW1wbG95bWVudFByb2plY3RBXHJcbiAgICAgICAgLy8gUGF5ZWUuUGF5cm9sbFBlcmlvZC5SZW11bmVyYXRpb25Db2xsZWN0aW9uLlJlbXVuZXJhdGlvbi5TYWxhcnlTYWNyaWZpY2VDb2xsZWN0aW9uLlNhbGFyeVNhY3JpZmljZS5UeXBlQ1xyXG4gICAgICAgIC8vIFBheWVlLlBheXJvbGxQZXJpb2QuUmVtdW5lcmF0aW9uQ29sbGVjdGlvbi5SZW11bmVyYXRpb24uU2FsYXJ5U2FjcmlmaWNlQ29sbGVjdGlvbi5TYWxhcnlTYWNyaWZpY2UuUGF5bWVudEFcclxuICAgICAgICAvLyBQYXllZS5QYXlyb2xsUGVyaW9kLlJlbXVuZXJhdGlvbkNvbGxlY3Rpb24uUmVtdW5lcmF0aW9uLlN1cGVyYW5udWF0aW9uQ29udHJpYnV0aW9uQ29sbGVjdGlvbi5TdXBlcmFubnVhdGlvbkNvbnRyaWJ1dGlvbi5FbnRpdGxlbWVudFR5cGVDXHJcbiAgICAgICAgcmV0dXJuIG5ld0Zvcm07XHJcblxyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiIFwiICsgZXJyO1xyXG4gICAgfVxyXG59Il19