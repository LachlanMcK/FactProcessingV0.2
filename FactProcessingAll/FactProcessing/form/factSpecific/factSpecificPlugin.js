"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const myLog = __importStar(require("../../../myLog"));
myLog.debug('Inside FormIdentityValidator');
;
exports.formSpecific = {};
function getFactSpecificStuff(formTypeMung, next) {
    myLog.debug("Loading form specific stuff for " + formTypeMung);
    Promise.resolve().then(() => __importStar(require("./UniqueFormRules_" + formTypeMung))).then((m) => {
        myLog.debug("Have loaded form specific stuff for " + formTypeMung);
        exports.formSpecific[formTypeMung] = m;
        exports.formMetaData = m.formMetaData;
        exports.formMetaDataById = m.formMetaDataById;
        exports.formMetaDataByName = m.formMetaDataByName;
        // priorLodgmentLookup = formSpecific.priorLodgmentLookup;
        // formIdLookup = formSpecific.formIdLookup;
        // confirmCanTakeIdentityFromPriorLodgment = formSpecific.confirmCanTakeIdentityFromPriorLodgment;
        exports.lineItemsSchema_FormSpecific = m.lineItemsSchema_FormSpecific;
        exports.businessRulesLanguage = m.businessRulesLanguage;
        exports.wireFormat = m.wireFormat;
        next();
    }).catch((reason) => {
        myLog.error("Module load failed, because" + reason + " will try to carry on.");
        next();
    });
}
exports.getFactSpecificStuff = getFactSpecificStuff;
function getPriorLodgmentLookupCriteria(formTypeMung, req, res) {
    if (!exports.formSpecific || !exports.formSpecific[formTypeMung])
        myLog.error('Curious', exports.formSpecific);
    let identityCriteria = addCommonIdentityCriteria({ FormType: exports.formSpecific[formTypeMung].FormType }, req, res);
    exports.formSpecific[formTypeMung].addToFormSpecificIdentityCriteria(identityCriteria, req, res);
    return identityCriteria;
}
exports.getPriorLodgmentLookupCriteria = getPriorLodgmentLookupCriteria;
function addCommonIdentityCriteria(identityCriteria, req, res) {
    if (req.body.ClientInternalId)
        identityCriteria.ClientInternalId = req.body.ClientInternalId;
    else {
        identityCriteria = universalIdentityCriteria(identityCriteria, res);
    }
    return identityCriteria;
}
function identityLookupCriteria(formTypeMung, req, res) {
    if (!exports.formSpecific || !exports.formSpecific[formTypeMung])
        myLog.error('Curious', exports.formSpecific);
    let identityCriteria = universalIdentityCriteria({ FormType: exports.formSpecific[formTypeMung].FormType }, res);
    exports.formSpecific[formTypeMung].addToFormSpecificIdentityCriteria(identityCriteria, req, res);
    identityCriteria["subjectClient.MatchingStatus"] = "UnMatched";
    return identityCriteria;
}
exports.identityLookupCriteria = identityLookupCriteria;
function universalIdentityCriteria(identityCriteria, res) {
    identityCriteria['subjectClient.ClientIdentifierType'] = res.locals.lookup['subjectClient.ClientIdentifierType'];
    identityCriteria['subjectClient.ClientIdentifierValue'] = res.locals.lookup['subjectClient.ClientIdentifierValue'];
    identityCriteria['subjectClient.MatchingStatus'] = "Matched";
    return identityCriteria;
}
//Confirm that identity info on the new form matches info from the retrieved form
function confirmCanTakeIdentityFromPriorLodgment(formTypeMung, req, foundForm, res) {
    if (!req.body.ClientInternalId)
        req.body.ClientInternalId = foundForm.ClientInternalId;
    else {
        res.locals.lookup.ClientInternalId = req.body.ClientInternalId; //use client internal id by preference
        delete res.locals.lookup.ClientIdentifierType;
        delete res.locals.lookup.ClientIdentifierValue;
    }
    exports.formSpecific[formTypeMung].confirmCanTakeIdentityFromPriorLodgment(formTypeMung, req, foundForm, res);
    myLog.debug('Prior lodgemnt lookup result: ' + req.body.subjectClient.MatchingStatus + " with client internal id: " + req.body.ClientInternalId);
    myLog.debug("After Prior lodgment lookup the body looks like: " + JSON.stringify(req.body).substr(0, 150));
}
exports.confirmCanTakeIdentityFromPriorLodgment = confirmCanTakeIdentityFromPriorLodgment;
function postPutPreReturnHook(formTypeMung, req, res) {
    return __awaiter(this, void 0, void 0, function* () {
        myLog.debug("Will do form specific fiddling here");
        return;
    });
}
exports.postPutPreReturnHook = postPutPreReturnHook;
function decideWhatToPutInPrefill(formTypeMung, meaningfulNameForm) {
    return __awaiter(this, void 0, void 0, function* () {
        myLog.debug("Will do form specific repliation here", formTypeMung);
        let x = exports.formSpecific[formTypeMung].decideWhatToPutInPrefill(formTypeMung, meaningfulNameForm);
        return x;
    });
}
exports.decideWhatToPutInPrefill = decideWhatToPutInPrefill;
function bulkTransmissionTracking(formTypeMung, req, res, meaningfulNameForm) {
    return __awaiter(this, void 0, void 0, function* () {
        myLog.debug("Seeing if need to upate File Counts for:", formTypeMung);
        return exports.formSpecific[formTypeMung].bulkTransmissionTracking(formTypeMung, req, res, meaningfulNameForm);
    });
}
exports.bulkTransmissionTracking = bulkTransmissionTracking;
//# sourceMappingURL=data:application/json;base64,