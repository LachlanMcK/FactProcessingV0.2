"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var stackTrace = require('stack-trace');
const dotenv = require('dotenv').config({ path: './FactProcessing/.env' });
const logr = require('debug')('FactProc:myLog');
logr(`Loading myLog with env variable DEBUG=${process.env.DEBUG}, Loglevel= ${process.env.LOGLEVEL}`);
debugger;
console.log(`  FactProc:myLog Loading myLog with env variable DEBUG=${process.env.DEBUG}, Loglevel= ${process.env.LOGLEVEL}`);
let loggers = {};
function logWithLocationIfAboveThreashold(logThreashold, level, args) {
    if (exports.logLevel > logThreashold)
        return args;
    let t = stackTrace.get();
    let f = t[2].getFileName();
    var funcN = level + f.substring(f.lastIndexOf("\\") + 1, f.length - 3);
    if (!loggers[funcN])
        loggers[funcN] = require('debug')('FactProc:' + funcN);
    // let loc = t[2].getLineNumber();
    // console.log(`LT ${logThreashold}, lev ${level}, fileReference ${fileReference}, funcN ${funcN}`, ...args);
    if (exports.fileReference == "1")
        loggers[funcN]("%s", t[2].toString());
    if (level == "E-")
        loggers[funcN]('************************************************** Encountered error **************************************************');
    let x = loggers[funcN]("%O", ...args);
    if (level == "E-")
        loggers[funcN]('************************************************** Encountered error **************************************************');
    return args;
}
exports.logLevel = process.env.LOGLEVEL || 4;
exports.fileReference = process.env.FILEREFERENCE || "0";
exports.log = function (msg, msg2) { logWithLocationIfAboveThreashold(0, "L-", arguments); };
exports.debug = function (msg, msg2) { logWithLocationIfAboveThreashold(1, "D-", arguments); };
exports.debugStr = function (msg, msg2) { return JSON.stringify(logWithLocationIfAboveThreashold(1, "D-", arguments)).substr(0, 100); };
exports.info = function (msg, msg2) { logWithLocationIfAboveThreashold(2, "I-", arguments); };
exports.warn = function (msg, ...msg2) { logWithLocationIfAboveThreashold(3, "W-", arguments); };
exports.error = function (msg, ...msg2) { logWithLocationIfAboveThreashold(4, "E-", arguments); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXlMb2cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJteUxvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN4QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLHVCQUF1QixFQUFFLENBQUMsQ0FBQztBQUMzRSxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtBQUMvQyxJQUFJLENBQUMseUNBQXlDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxlQUFlLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUUsQ0FBQztBQUN2RyxRQUFRLENBQUM7QUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLDBEQUEwRCxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssZUFBZSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFFLENBQUM7QUFFL0gsSUFBSSxPQUFPLEdBQXVCLEVBQUUsQ0FBQztBQUVyQyxTQUFTLGdDQUFnQyxDQUFDLGFBQXFCLEVBQUUsS0FBYSxFQUFFLElBQVM7SUFDckYsSUFBSSxnQkFBUSxHQUFHLGFBQWE7UUFBRSxPQUFPLElBQUksQ0FBQztJQUMxQyxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzNCLElBQUksS0FBSyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdkUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUM1RSxrQ0FBa0M7SUFDbEMsNkdBQTZHO0lBQzdHLElBQUkscUJBQWEsSUFBSSxHQUFHO1FBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNoRSxJQUFJLEtBQUssSUFBSSxJQUFJO1FBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLHlIQUF5SCxDQUFDLENBQUM7SUFDN0osSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ3RDLElBQUksS0FBSyxJQUFJLElBQUk7UUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMseUhBQXlILENBQUMsQ0FBQztJQUM3SixPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBRVksUUFBQSxRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDO0FBQ3JDLFFBQUEsYUFBYSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxJQUFJLEdBQUcsQ0FBQztBQUVuRCxRQUFBLEdBQUcsR0FBRyxVQUFVLEdBQVEsRUFBRSxJQUFVLElBQUksZ0NBQWdDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQTtBQUM3RixRQUFBLEtBQUssR0FBRyxVQUFVLEdBQVEsRUFBRSxJQUFVLElBQUcsZ0NBQWdDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQTtBQUM5RixRQUFBLFFBQVEsR0FBRyxVQUFVLEdBQVEsRUFBRSxJQUFVLElBQUcsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLGdDQUFnQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUEsQ0FBQyxDQUFBO0FBQ3RJLFFBQUEsSUFBSSxHQUFHLFVBQVUsR0FBUSxFQUFFLElBQVUsSUFBSSxnQ0FBZ0MsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFBLENBQUEsQ0FBQyxDQUFBO0FBQzlGLFFBQUEsSUFBSSxHQUFHLFVBQVUsR0FBUSxFQUFFLEdBQUcsSUFBUyxJQUFJLGdDQUFnQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQUE7QUFDaEcsUUFBQSxLQUFLLEdBQUcsVUFBVSxHQUFRLEVBQUUsR0FBRyxJQUFTLElBQUksZ0NBQWdDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbInZhciBzdGFja1RyYWNlID0gcmVxdWlyZSgnc3RhY2stdHJhY2UnKTtcclxuY29uc3QgZG90ZW52ID0gcmVxdWlyZSgnZG90ZW52JykuY29uZmlnKHsgcGF0aDogJy4vRmFjdFByb2Nlc3NpbmcvLmVudicgfSk7XHJcbmNvbnN0IGxvZ3IgPSByZXF1aXJlKCdkZWJ1ZycpKCdGYWN0UHJvYzpteUxvZycpXHJcbmxvZ3IoYExvYWRpbmcgbXlMb2cgd2l0aCBlbnYgdmFyaWFibGUgREVCVUc9JHtwcm9jZXNzLmVudi5ERUJVR30sIExvZ2xldmVsPSAke3Byb2Nlc3MuZW52LkxPR0xFVkVMfWAgKTtcclxuZGVidWdnZXI7XHJcbmNvbnNvbGUubG9nKGAgIEZhY3RQcm9jOm15TG9nIExvYWRpbmcgbXlMb2cgd2l0aCBlbnYgdmFyaWFibGUgREVCVUc9JHtwcm9jZXNzLmVudi5ERUJVR30sIExvZ2xldmVsPSAke3Byb2Nlc3MuZW52LkxPR0xFVkVMfWAgKTtcclxuXHJcbmxldCBsb2dnZXJzOiB7W2tleTogc3RyaW5nXTphbnkgfT17fTtcclxuXHJcbmZ1bmN0aW9uIGxvZ1dpdGhMb2NhdGlvbklmQWJvdmVUaHJlYXNob2xkKGxvZ1RocmVhc2hvbGQ6IG51bWJlciwgbGV2ZWw6IHN0cmluZywgYXJnczogYW55KSB7XHJcbiAgICBpZiAobG9nTGV2ZWwgPiBsb2dUaHJlYXNob2xkKSByZXR1cm4gYXJncztcclxuICAgIGxldCB0ID0gc3RhY2tUcmFjZS5nZXQoKTtcclxuICAgIGxldCBmID0gdFsyXS5nZXRGaWxlTmFtZSgpO1xyXG4gICAgdmFyIGZ1bmNOID0gbGV2ZWwgKyBmLnN1YnN0cmluZyhmLmxhc3RJbmRleE9mKFwiXFxcXFwiKSArIDEsIGYubGVuZ3RoIC0gMyk7XHJcbiAgICBpZiAoIWxvZ2dlcnNbZnVuY05dKSBsb2dnZXJzW2Z1bmNOXSA9IHJlcXVpcmUoJ2RlYnVnJykoJ0ZhY3RQcm9jOicgKyBmdW5jTik7XHJcbiAgICAvLyBsZXQgbG9jID0gdFsyXS5nZXRMaW5lTnVtYmVyKCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhgTFQgJHtsb2dUaHJlYXNob2xkfSwgbGV2ICR7bGV2ZWx9LCBmaWxlUmVmZXJlbmNlICR7ZmlsZVJlZmVyZW5jZX0sIGZ1bmNOICR7ZnVuY059YCwgLi4uYXJncyk7XHJcbiAgICBpZiAoZmlsZVJlZmVyZW5jZSA9PSBcIjFcIikgbG9nZ2Vyc1tmdW5jTl0oXCIlc1wiLCB0WzJdLnRvU3RyaW5nKCkpO1xyXG4gICAgaWYgKGxldmVsID09IFwiRS1cIikgbG9nZ2Vyc1tmdW5jTl0oJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVuY291bnRlcmVkIGVycm9yICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqJyk7XHJcbiAgICBsZXQgeCA9IGxvZ2dlcnNbZnVuY05dKFwiJU9cIiwgLi4uYXJncyk7XHJcbiAgICBpZiAobGV2ZWwgPT0gXCJFLVwiKSBsb2dnZXJzW2Z1bmNOXSgnKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRW5jb3VudGVyZWQgZXJyb3IgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKionKTtcclxuICAgIHJldHVybiBhcmdzO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbG9nTGV2ZWwgPSBwcm9jZXNzLmVudi5MT0dMRVZFTCB8fCA0O1xyXG5leHBvcnQgY29uc3QgZmlsZVJlZmVyZW5jZSA9IHByb2Nlc3MuZW52LkZJTEVSRUZFUkVOQ0UgfHwgXCIwXCI7XHJcblxyXG5leHBvcnQgdmFyIGxvZyA9IGZ1bmN0aW9uIChtc2c6IGFueSwgbXNnMj86IGFueSkgeyBsb2dXaXRoTG9jYXRpb25JZkFib3ZlVGhyZWFzaG9sZCgwLCBcIkwtXCIsIGFyZ3VtZW50cyl9XHJcbmV4cG9ydCB2YXIgZGVidWcgPSBmdW5jdGlvbiAobXNnOiBhbnksIG1zZzI/OiBhbnkpIHtsb2dXaXRoTG9jYXRpb25JZkFib3ZlVGhyZWFzaG9sZCgxLCBcIkQtXCIsIGFyZ3VtZW50cyl9XHJcbmV4cG9ydCB2YXIgZGVidWdTdHIgPSBmdW5jdGlvbiAobXNnOiBhbnksIG1zZzI/OiBhbnkpIHtyZXR1cm4gSlNPTi5zdHJpbmdpZnkobG9nV2l0aExvY2F0aW9uSWZBYm92ZVRocmVhc2hvbGQoMSwgXCJELVwiLCBhcmd1bWVudHMpKS5zdWJzdHIoMCwxMDApfVxyXG5leHBvcnQgdmFyIGluZm8gPSBmdW5jdGlvbiAobXNnOiBhbnksIG1zZzI/OiBhbnkpIHsgbG9nV2l0aExvY2F0aW9uSWZBYm92ZVRocmVhc2hvbGQoMiwgXCJJLVwiLCBhcmd1bWVudHMpfVxyXG5leHBvcnQgdmFyIHdhcm4gPSBmdW5jdGlvbiAobXNnOiBhbnksIC4uLm1zZzI6IGFueSkgeyBsb2dXaXRoTG9jYXRpb25JZkFib3ZlVGhyZWFzaG9sZCgzLCBcIlctXCIsIGFyZ3VtZW50cyl9XHJcbmV4cG9ydCB2YXIgZXJyb3IgPSBmdW5jdGlvbiAobXNnOiBhbnksIC4uLm1zZzI6IGFueSkgeyBsb2dXaXRoTG9jYXRpb25JZkFib3ZlVGhyZWFzaG9sZCg0LCBcIkUtXCIsIGFyZ3VtZW50cyl9Il19